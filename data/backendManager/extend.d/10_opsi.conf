# -*- coding: utf-8 -*-

def setProductActionRequestWithDependencies(self, productId, clientId, actionRequest, force=False):
	
	depotId = self.getDepotId(clientId = clientId)
	if not self.productOnDepot_getObjects(depotId = depotId, productId = productId):
		raise BackendMissingDataError("Product '%s' not found on depot '%s'" % (productId, depotId))
	
	modified = False
	productOnClientsByProductId = {}
	addProductOnClientDefaults = self._backend.backend_getOptions().get("addProductOnClientDefaults", False)
	try:
		self._backend.backend_setOptions({"addProductOnClientDefaults": True})
		productOnClients = self._backend.productOnClient_getObjects(clientId = clientId)
	finally:
		self._backend.backend_setOptions({"addProductOnClientDefaults": addProductOnClientDefaults})
		
	if productOnClients:
		for poc in productOnClients:
			if not productOnClientsByProductId.has_key(poc.getProductId()):
				productOnClientsByProductId[poc.getProductId()] = poc
	
	productOnClients = []
	
	if productOnClientsByProductId.has_key(productId):
		productOnClients.append(productOnClientsByProductId[productId])
	else:
		productOnClients.append(ProductOnClient(
			productId          = productId,
			productType        = 'LocalbootProduct',
			clientId           = clientId,
			installationStatus = 'not_installed'
		))
	
	
	if productOnClients[0].getActionRequest() != actionRequest:
		productOnClients[0].setActionRequest(actionRequest)
		modified = True
	
	if modified:
		
		productOnClientsWithDependencies = self._backend.productOnClient_addDependencies(productOnClients)
		if productOnClientsWithDependencies:
			for poc in productOnClientsWithDependencies:
				if poc.getProductId() == productId:
					if poc.getActionRequest() != actionRequest:
						raise BackendIOError("Error occured by resolving the dependendcies that configured in product: '%s'. No ProductAction will be set." % productId)
				
			for poc in productOnClientsWithDependencies:
				if poc.getProductId() == productId:
					continue
				elif productOnClientsByProductId.has_key(poc.getProductId()):
					if force or not productOnClientsByProductId[poc.getProductId()].getInstallationStatus() == "installed":
						requiredProduct = productOnClientsByProductId[poc.getProductId()]
						requiredProduct.setActionRequest(poc.getActionRequest())
						productOnClients.append(requiredProduct)
			if productOnClients:
				self._backend.productOnClient_updateObjects(productOnClients)
				
def userIsReadOnlyUser(self):
	return self.accessControl_userIsReadOnlyUser()
	
def getServiceTime(self, utctime = False):
	if utctime:
		return str(datetime.datetime.utcnow())
	else:
		return str(datetime.datetime.now())
