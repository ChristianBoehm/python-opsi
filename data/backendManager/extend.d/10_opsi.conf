# -*- coding: utf-8 -*-

def setProductActionRequestWithDependencies(self, productId, clientId, actionRequest, force=False):
	depotId = self.getDepotId(clientId=clientId)
	if not self.productOnDepot_getObjects(depotId=depotId, productId=productId):
		raise BackendMissingDataError("Product '%s' not found on depot '%s'" % (productId, depotId))

	productOnClientsByProductId = {}
	addProductOnClientDefaults = self._backend.backend_getOptions().get("addProductOnClientDefaults", False)
	try:
		self._backend.backend_setOptions({"addProductOnClientDefaults": True})
		productOnClients = self._backend.productOnClient_getObjects(clientId=clientId)
	finally:
		self._backend.backend_setOptions({"addProductOnClientDefaults": addProductOnClientDefaults})

	for poc in productOnClients:
		if poc.getProductId() not in productOnClientsByProductId:
			productOnClientsByProductId[poc.getProductId()] = poc

	productOnClients = []

	if productId in productOnClientsByProductId:
		productOnClients.append(productOnClientsByProductId[productId])
	else:
		productOnClients.append(ProductOnClient(
			productId=productId,
			productType='LocalbootProduct',
			clientId=clientId,
			installationStatus='not_installed'
		))


	if productOnClients[0].getActionRequest() != actionRequest:
		productOnClients[0].setActionRequest(actionRequest)

		productOnClientsWithDependencies = self._backend.productOnClient_addDependencies(productOnClients)
		if productOnClientsWithDependencies:
			for poc in productOnClientsWithDependencies:
				if poc.getProductId() == productId:
					if poc.getActionRequest() != actionRequest:
						raise BackendIOError(u"Error occured while resolving the dependencies that are configured in product: {0!r}. No ProductAction will be set.".format(productId))

			for poc in productOnClientsWithDependencies:
				if poc.getProductId() == productId:
					continue
				elif poc.getProductId() in productOnClientsByProductId:
					if force or productOnClientsByProductId[poc.getProductId()].getInstallationStatus() != "installed":
						requiredProduct = productOnClientsByProductId[poc.getProductId()]
						requiredProduct.setActionRequest(poc.getActionRequest())
						productOnClients.append(requiredProduct)

			self._backend.productOnClient_updateObjects(productOnClients)


def userIsReadOnlyUser(self):
	return self.accessControl_userIsReadOnlyUser()


def getServiceTime(self, utctime=False):
	import datetime

	if utctime:
		return str(datetime.datetime.utcnow())
	else:
		return str(datetime.datetime.now())


def getSoftwareAuditDataCount(self):
	"""Get the count of data relevant to the software audit."""
	return len(self.auditSoftware_getObjects()) + len(self.auditSoftwareOnClient_getObjects())


def getHardwareAuditDataCount(self):
	"""Get the count of data relevant to the hardware audit."""
	return len(self.auditHardware_getObjects()) + len(self.auditHardwareOnHost_getObjects())


productOrderingCache = {}
def getProductOrdering(self, depotId, sortAlgorithm=None):
	import OPSI.SharedAlgorithm
	global productOrderingCache
	if not sortAlgorithm:
		sortAlgorithm = "algorithm2"
		configs = self.config_getObjects(id="product_sort_algorithm")
		if configs and ("algorithm1" in configs[0].getDefaultValues()):
			sortAlgorithm = "algorithm1"

	logger.notice(u'Using sort algorithm {0!r}'.format(sortAlgorithm))

	productsByIdAndVersion = {}
	for product in self.product_getObjects(type="LocalbootProduct"):
		if product.id not in productsByIdAndVersion:
			productsByIdAndVersion[product.id] = {}
		if product.productVersion not in productsByIdAndVersion[product.id]:
			productsByIdAndVersion[product.id][product.productVersion] = {}

		productsByIdAndVersion[product.id][product.productVersion][product.packageVersion] = product
		

	productsDependenciesByIdAndVersion = {}
	for productDependency in self.productDependency_getObjects(productAction="setup"):
		if productDependency.productId not in productsDependenciesByIdAndVersion:
			productsDependenciesByIdAndVersion[productDependency.productId] = {}
		if productDependency.productVersion not in productsDependenciesByIdAndVersion[productDependency.productId]:
			productsDependenciesByIdAndVersion[productDependency.productId][productDependency.productVersion] = {}
		if productDependency.packageVersion not in productsDependenciesByIdAndVersion[productDependency.productId][productDependency.productVersion]:
			productsDependenciesByIdAndVersion[productDependency.productId][productDependency.productVersion][productDependency.packageVersion] = []

		productsDependenciesByIdAndVersion[productDependency.productId][productDependency.productVersion][productDependency.packageVersion].append(productDependency)

	availableProducts = []
	productDependencies = []
	productIds = []
	for productOnDepot in self.productOnDepot_getObjects(depotId=depotId, productType="LocalbootProduct"):
		product = productsByIdAndVersion.get(productOnDepot.productId, {}).get(productOnDepot.productVersion, {}).get(productOnDepot.packageVersion)
		if not product:
			continue
		availableProducts.append(product)
		productIds.append(product.id)
		if not product.setupScript:
			continue
		productDependencies.extend(productsDependenciesByIdAndVersion.get(productOnDepot.productId, {}).get(productOnDepot.productVersion, {}).get(productOnDepot.packageVersion, []))

	productIds.sort()
	

	if sortAlgorithm == "algorithm1":
		sortedList = OPSI.SharedAlgorithm.generateProductSequence_algorithm1(availableProducts, productDependencies)
	else:
		sortedList = OPSI.SharedAlgorithm.generateProductSequence_algorithm2(availableProducts, productDependencies)

	return {
		"not_sorted": productIds,
		"sorted": sortedList
	}

def setRights(self, path=None):
	"""
	Setting rights for a specified path.
	If no path is given it will try to set the rights for the current depot.

	The current implementation requires "sudo opsi-setup --patch-sudoers-file"
	to be run before.
	"""
	import os
	import subprocess

	if path is None:
		oldDepotPath = u'/opt/pcbin/install/'
		newDepotPath = u'/var/lib/opsi/depot/'
		try:
			if os.path.exists(newDepotPath) and os.path.islink(newDepotPath):
				linkedPath = os.readlink(newDepotPath)
				if os.path.isabs(linkedPath):
					path = linkedPath
				else:
					path = os.path.join(os.path.dirname(newDepotPath), linkedPath)
			else:
				path = oldDepotPath
		except OSError as oserr:
			if 'operation not permitted' in str(oserr).lower():
				path = oldDepotPath
			else:
				raise oserr

	if not os.path.exists(path):
		raise Exception('The path "{0}" does not exist.'.format(path))

	logger.debug('Going to set rights for path "{0}"'.format(path))
	callResult = subprocess.call(['sudo', 'opsi-set-rights', path])
	logger.debug('Finished setting rights. Exit Code: {0}'.format(callResult))

	if callResult:
		raise Exception("Setting rights on {0} failed. Did you run "
						"'opsi-setup --patch-sudoers-file'?".format(path))

	return 'Changing rights at "{0}" successful.'.format(path)
