# -*- coding: utf-8 -*-

def setProductActionRequestWithDependencies(self, productId, clientId, actionRequest, force=False):
	depotId = self.getDepotId(clientId=clientId)
	if not self.productOnDepot_getObjects(depotId=depotId, productId=productId):
		raise BackendMissingDataError("Product '%s' not found on depot '%s'" % (productId, depotId))

	productOnClientsByProductId = {}
	addProductOnClientDefaults = self._backend.backend_getOptions().get("addProductOnClientDefaults", False)
	try:
		self._backend.backend_setOptions({"addProductOnClientDefaults": True})
		productOnClients = self._backend.productOnClient_getObjects(clientId=clientId)
	finally:
		self._backend.backend_setOptions({"addProductOnClientDefaults": addProductOnClientDefaults})

	for poc in productOnClients:
		if poc.getProductId() not in productOnClientsByProductId:
			productOnClientsByProductId[poc.getProductId()] = poc

	productOnClients = []

	if productId in productOnClientsByProductId:
		productOnClients.append(productOnClientsByProductId[productId])
	else:
		productOnClients.append(ProductOnClient(
			productId=productId,
			productType='LocalbootProduct',
			clientId=clientId,
			installationStatus='not_installed'
		))


	if productOnClients[0].getActionRequest() != actionRequest:
		productOnClients[0].setActionRequest(actionRequest)

		productOnClientsWithDependencies = self._backend.productOnClient_addDependencies(productOnClients)
		if productOnClientsWithDependencies:
			for poc in productOnClientsWithDependencies:
				if poc.getProductId() == productId:
					if poc.getActionRequest() != actionRequest:
						raise BackendIOError("Error occured by resolving the dependendcies that configured in product: '%s'. No ProductAction will be set." % productId)

			for poc in productOnClientsWithDependencies:
				if poc.getProductId() == productId:
					continue
				elif poc.getProductId() in productOnClientsByProductId:
					if force or productOnClientsByProductId[poc.getProductId()].getInstallationStatus() != "installed":
						requiredProduct = productOnClientsByProductId[poc.getProductId()]
						requiredProduct.setActionRequest(poc.getActionRequest())
						productOnClients.append(requiredProduct)

			self._backend.productOnClient_updateObjects(productOnClients)


def userIsReadOnlyUser(self):
	return self.accessControl_userIsReadOnlyUser()


def getServiceTime(self, utctime = False):
	if utctime:
		return str(datetime.datetime.utcnow())
	else:
		return str(datetime.datetime.now())


def getSoftwareAuditDataCount(self):
	"""Get the count of data relevant to the software audit."""
	return len(self.auditSoftware_getObjects()) + len(self.auditSoftwareOnClient_getObjects())


def getHardwareAuditDataCount(self):
	"""Get the count of data relevant to the hardware audit."""
	return len(self.auditHardware_getObjects()) + len(self.auditHardwareOnHost_getObjects())
