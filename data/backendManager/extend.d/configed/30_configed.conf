# -*- coding: utf-8 -*-

def _getProductStates_hash(self, objectIds=[], options={}, productType=None):
	#based on productOnClients 
	if not productType: productType = None
	result = {}
	
	productHasPriority = {}
	priorityClasses = {}
	
	for product in self.product_getObjects():
		prio = product.priority
		if not prio:
			prio = 0
		productHasPriority[product.id]= prio
		
		if not priorityClasses.has_key(prio):
			priorityClasses[prio] = []
		priorityClasses[prio] .append(product.id)
	
	#self.backend_setOptions({"addProductOnClientDefaults": True})
	productOnClients = self.productOnClient_getObjects(clientId = objectIds, productType = productType)
	
	
	for productOnClient in productOnClients:
		if not result.has_key(productOnClient.clientId):
			result[productOnClient.clientId] = []
		lastStateChange = productOnClient.modificationTime or u''
		match = re.search('^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)$', lastStateChange)
		if match:
			lastStateChange = u'%s%s%s%s%s%s' % ( match.group(1), match.group(2), match.group(3), match.group(4), match.group(5), match.group(6) )
			
		actionSequence = productHasPriority[productOnClient.productId];
		if not actionSequence:
			actionSequence = 0
			
		result[productOnClient.clientId].append({
			u"lastStateChange":     lastStateChange,
			u"productVersion":      productOnClient.productVersion or u'',
			u"packageVersion":      productOnClient.packageVersion or u'',
			u"targetConfiguration": productOnClient.targetConfiguration or u'',
			u"lastAction":          productOnClient.lastAction or u'',
			u"installationStatus":  productOnClient.installationStatus,
			u"actionRequest":       productOnClient.actionRequest,
			u"actionProgress":      productOnClient.actionProgress or u'',
			u"actionResult":        productOnClient.actionResult or u'',
			u"productId":           productOnClient.productId,
			u"productPriority":	productHasPriority[productOnClient.productId],
			u"actionSequence": 	actionSequence
			#u"actionSequence": 	productOnClient.actionSequence
		})
	return result

def getLocalBootProductStates_hash(self, objectIds=[], options={}):
	return self._getProductStates_hash(objectIds = objectIds, options = options, productType = 'LocalbootProduct')

def getNetBootProductStates_hash(self, objectIds=[], options={}):
	return self._getProductStates_hash(objectIds = objectIds, options = options, productType = 'NetbootProduct')

def getProductStates_hash(self, objectIds=[], options={}):
	return self._getProductStates_hash(objectIds = objectIds, options = options)

def getProductProperties(self, depotId, objectIds):
	result = {}
	addProductPropertyStateDefaults = self._backend.backend_getOptions().get('addProductPropertyStateDefaults', False)
	try:
		self._backend.backend_setOptions( { 'addProductPropertyStateDefaults': True } )
		productIds = []
		for productOnDepot in self.productOnDepot_getIdents(returnType = 'dict'):
			productIds.append(productOnDepot['productId'])
		
		for productPropertyState in self.productPropertyState_getObjects(productId = productIds, objectId = objectIds):
			if not result.has_key(productPropertyState.objectId):
				result[productPropertyState.objectId] = {}
			if not result[productPropertyState.objectId].has_key(productPropertyState.productId):
				result[productPropertyState.objectId][productPropertyState.productId] = {}
			result[productPropertyState.objectId][productPropertyState.productId][productPropertyState.propertyId] = u','.join(forceUnicodeList(productPropertyState.getValues()))
	finally:
		self._backend.backend_setOptions( { 'addProductPropertyStateDefaults': addProductPropertyStateDefaults } )
	return result
	
	
def _getProducts_hash(self, depotIds=[]):
	result = {}
	for depotId in depotIds:
		result[depotId] = {}
	
	for productOnDepot in self.productOnDepot_getObjects(depotId = depotIds):
		if not result.has_key(productOnDepot.depotId):
			result[productOnDepot.depotId] = {}
		product = products.get(productOnDepot.productId, {}).get(productOnDepot.productVersion, {}).get(productOnDepot.packageVersion)
		if not product:
			raise BackendMissingDataError(u"Product with id '%s', productVersion '%s', packageVersion '%s' not found" \
				% (productOnDepot.productId, productOnDepot.productVersion, productOnDepot.packageVersion))
		result[productOnDepot.depotId][productOnDepot.productId] = self._productToHash(product)
	return result
	

def getProductsInDepot(self, depotId=None, productType=None):
	depotIds = self.host_getIdents(type = 'OpsiDepotserver', returnType = 'unicode')
	products = self.product_getObjects()
	
	if depotId in depotIds:
		filteredProducts = []
		productsByIdAndVersion = {}
		for product in products:
			if not productsByIdAndVersion.has_key(product.id):
				productsByIdAndVersion[product.id] = {}
			if not productsByIdAndVersion[product.id].has_key(product.productVersion):
				productsByIdAndVersion[product.id][product.productVersion] = {}
			productsByIdAndVersion[product.id][product.productVersion][product.packageVersion] = product
			
		for productOnDepot in self.productOnDepot_getObjects(depotId = depotId, productType = productType):
			product = productsByIdAndVersion.get(productOnDepot.productId, {}).get(productOnDepot.productVersion, {}).get(productOnDepot.packageVersion)
			if product:
				filteredProducts.append(product)
		products = filteredProducts
		
	return products

def getProductInfos_hash(self, depotId=None):
	products = self.getProductsInDepot(depotId)
	
	result = {}
	for product in products:
		result[product.id] = {
			'name':            product.name,
			'description':     product.description,
			'advice':          product.advice,
			'priority':        product.priority,
			'productVersion':  product.productVersion,
			'packageVersion':  product.packageVersion,
			'actions':         [ u'none' ]
		}
		if product.setupScript:     result[product.id]['actions'].append(u'setup')
		if product.uninstallScript: result[product.id]['actions'].append(u'uninstall')
		if product.updateScript:    result[product.id]['actions'].append(u'update')
		if product.alwaysScript:    result[product.id]['actions'].append(u'always')
		if product.onceScript:      result[product.id]['actions'].append(u'once')
		if product.customScript:    result[product.id]['actions'].append(u'custom')
	return result

def getProductOrdering(self, depotId, sortAlgorithm = None):
	if not sortAlgorithm:
		sortAlgorithm = "algorithm2"
		configs = self.config_getObjects(id = "product_sort_algorithm")
		if configs and ("product_on_client" in configs[0].getDefaultValues() or "algorithm1" in configs[0].getDefaultValues()):
			sortAlgorithm = "algorithm1"
		
	productOnClients    = []
	availableProducts   = []
	productDependencies = []
	productIds          = []
	for productOnDepot in self.productOnDepot_getObjects(depotId = depotId):
		products = self.product_getObjects(
				id             = productOnDepot.productId,
				type           = productOnDepot.productType,
				productVersion = productOnDepot.productVersion,
				packageVersion = productOnDepot.packageVersion,
		)
		if not products:
			continue
		product = products[0]
		availableProducts.append(product)
		productIds.append(product.id)
		if not product.setupScript:
			continue
		productOnClients.append(
			ProductOnClient(
				clientId       = 'hostname.domain.tld',
				productId      = product.id,
				productType    = product.getType(),
				productVersion = product.productVersion,
				packageVersion = product.packageVersion,
				actionRequest  = 'setup'
			)
		)
		productDependencies.extend(
			self.productDependency_getObjects(
				productId      = product.id,
				productVersion = product.productVersion,
				packageVersion = product.packageVersion,
				productAction  = 'setup'
			)
		)
	
	sortedList = []
	if (sortAlgorithm == "algorithm1"):
		for productOnClient in OPSI.SharedAlgorithm.generateProductOnClientSequence_algorithm1(productOnClients, availableProducts, productDependencies):
			sortedList.append(productOnClient.productId)
	else:
		for productOnClient in OPSI.SharedAlgorithm.generateProductOnClientSequence_algorithm2(productOnClients, availableProducts, productDependencies):
			sortedList.append(productOnClient.productId)
	result  = {}
	result["not_sorted"] = productIds
	result["sorted"] = sortedList
	return result

def getProductOrdering_product_on_client(self, depotId):
	return self.getProductOrdering(depotId, sortAlgorithm = 'algorithm1')

def getProductOrdering_product_only(self, depotId):
	return self.getProductOrdering(depotId, sortAlgorithm = 'algorithm2')





