# -*- coding: utf-8 -*-


def readCommands(self):
	import json
	with open(self._getSshCommandFile(), 'r') as f:
		try:
			filecontent = json.load(f)
		except ValueError as ve:
			print("ValueError can not load file")
			return []
	assert isinstance(filecontent, list), "file content should be from type list"
	for element in filecontent:
		assert isinstance(element, dict), "expected elements of type dictionary"
	return filecontent  


def createCommands(self, commands): 
	assert isinstance(commands, list), "file content should be from type list"
	for element in commands:
		assert isinstance(element, dict), "expected elements of type dictionary"
	newList=[]
	for com in commands:
		newList = self._createCommand(com)
	return newList

def createCommand(self, name, menuText): #, commands, needSudo, priority,tooltip=u'', parentMenu=None ):
	import json
	com=self._getCommandDict(name, menuText)
	return self._createCommand(com) 

def _createCommand(self, command, overwrite=False): 
	existingCommands=self.readCommands()
	exists=False
	if len(existingCommands) > 0:
		for existingCom in existingCommands:
			if command["name"] == existingCom["name"]:
				if not overwrite:
					exists=True
				else:
					objdic.update(command)
	if exists and not overwrite:
		raise Exception("name existiert bereits.")
	elif not exists:
		existingCommands.append(command)
	self._writeFileWith(existingCommands)
	return existingCommands



def updateCommand(self, name, menuText):
	com=self._getCommandDict(name, menuText)
	existingCommands=self.readCommands()
	return self._createCommand(com,True)

def updateCommands(self, commands):
	assert isinstance(commands, list), "file content should be from type list"
	for element in commands:
		assert isinstance(element, dict), "expected elements of type dictionary"
	newList=[]
	for com in commands:
		newList = self._createCommand(com, True)
	return newList

def deleteCommand(self,name):
	#import types
	existingCommands=self.readCommands()
	#if not isinstance(fileData, types.ListType):
	#	raise TypeError("content should from type list")
	for command in existingCommands:
		if command["name"]==name:
			existingCommands.remove(command)
	self._writeFileWith(existingCommands)
	return existingCommands



def _getCommandDict(self, name, menuText):
	comDict={u'name':name, u'menuText':menuText}
	return comDict

def _getSshCommandFile(self, filename=u'/home/sucher/tmp/json/com.json'):
	import os.path
	if not os.path.isfile(filename):
		with open(filename, 'w') as f:
			f.write("")
		print("file did not exists, but is created")
	return filename

# def _setSshCommandFile(self, filename):
	# return u'/home/sucher/tmp/json/com.json'

def _writeFileWith(self, content, mode='w'):
	import json
	with open(self._getSshCommandFile(), mode) as f:
		json.dumps(content,f)

def _deleteSshCommandFileContent(self):
	self._writeFileWith("")