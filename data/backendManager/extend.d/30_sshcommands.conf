# -*- coding: utf-8 -*-


def readCommands(self, create_new_file=False):
	import json
	if create_new_file:
		return self._createNewCommandFile()
	filecontent=''
	with open(self._getSshCommandFile(), 'r') as f:
		try:
			filecontent = json.load(f)
		except ValueError as ve:
			print( u' ValueError can not load file')
			print(ve)
			#filecontent=[{}]
	assert isinstance(filecontent, list), u'file content should be from type list'
	for element in filecontent:
		assert isinstance(element, dict), u'expected elements of type dictionary'
	return filecontent


def createCommands(self, commands):
	assert isinstance(commands, list), u'file content should be from type list'
	for element in commands:
		assert isinstance(element, dict), u'expected elements of type dictionary'
	for com in commands:
		self._createCommand(com)
	return self.readCommands()

def createCommand(self, name, menuText): #, commands, needSudo, priority,tooltip=u'', parentMenu=None ):
# def createSshCommand(self, name, menuText, command_list, priority, needSudo=False ,tooltip=u'', parentMenu=None ):
	import json
	com=self._getCommandDict(name, menuText)
	return self._createCommand(com)

def _createCommand(self, command, overwrite=False):
	existingCommands=self.readCommands()
	exists=False
	if len(existingCommands) > 0:
		for existingCom in existingCommands:
			if command["name"] == existingCom["name"]:
				if overwrite:
					existingCom.update(command)
					self._writeFileWith(existingCommands)
				else:
					exists=True
	if exists and not overwrite:
		raise Exception(u'Command already exists')
	elif not exists and not overwrite:
		existingCommands.append(command)
		self._writeFileWith(existingCommands)
	return self.readCommands()



def updateCommand(self, name, menuText):
	com=self._getCommandDict(name, menuText)
	existingCommands=self.readCommands()
	return self._createCommand(com,True)

def updateCommands(self, commands):
	assert isinstance(commands, list), u'file content should be from type list'
	for element in commands:
		assert isinstance(element, dict), u'expected elements of type dictionary'
	for com in commands:
		self._createCommand(com, True)
	return self.readCommands()

def deleteCommand(self,name):
	existingCommands=self.readCommands()
	for command in existingCommands:
		if command["name"]==name:
			existingCommands.remove(command)
			self._writeFileWith(existingCommands)
	return self.readCommands()



def _getCommandDict(self, name, menuText):
	import types
	comDict={u'name':name, u'menuText':menuText}
	return comDict

def _getSshCommandFile(self, filename=u'/home/sucher/tmp/json/com.json'):
	import os.path
	if not os.path.isfile(filename):
		with open(filename, 'w') as f:
			f.write("")
		print(u'file did not exists, but is created')
	return filename

def _writeFileWith(self, content, mode='w'):
	import json
	with open(self._getSshCommandFile(), mode) as f:
		try:
			json.dump(content,f)
		except Exception as e:
			print(e)

# def createSshCommand(self, name, menuText, command_list, priority, needSudo=False ,tooltip=u'', parentMenu=None ):
def _createNewCommandFile(self):
	command1={"name":"opsisetrights", "menuText":"opsi Rechte setzten", "commands":["opsi-set-rights"], "prioriry":10, "needSudo":False, "tooltip":"Rechte mittels opsi-set-rights setzten", "parentMenu":None }
	command2={"name":"opsiinitconfig", "menuText":"opsi Konfiguration initalisieren", "commands":["opsi-setup --init-current-config"], "prioriry":11, "needSudo":False, "tooltip":"Konfiguration initialisieren", "parentMenu":None }
	command_list=[]
	command_list.append(command1)
	command_list.append(command2)
	self._writeFileWith(command_list)
	return self.readCommands()