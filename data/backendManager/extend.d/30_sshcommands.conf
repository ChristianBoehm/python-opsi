# -*- coding: utf-8 -*-




def createCommands(self, commands): 
	import types
	if not isinstance(commands, types.ListType):
		raise TypeError("content should from type list")
	for obj in commands:
		self.createCommand(obj["name"], obj["menuText"])
	# fileData=self.readCommands()
	# for obj in fileData:
	# 	if data["name"] in obj["name"]:
	# 		raise Exception("name existiert bereits.")

def createCommand(self, name, menuText): #, commands, needSudo, priority,tooltip=u'', parentMenu=None ):
#def createCommand( name, menuText):
	import types
	data=json.loads("{u'name':name, u'menuText':menuText}")
	fileData=self.readCommands()
	if not isinstance(fileData, types.ListType):
		raise TypeError("fileData should be from type list")
	# if not isinstance(fileData[0], types.DictType):
		# raise TypeError("fileData.items should be from type dictionary")
	for obj in fileData:
		# for key, value in obj.items():
		# for dicobj in obj:
		if data['name'] == obj['name']:
			raise Exception("name existiert bereits.")
	fileData.append(data)
	self._writeFileWith(fileData)
	return fileData
# 	import json

# 	# if parentMenu==None:
# 		# parentMenu=u'Null'
# 	data=[{u'name':name,
# 		u'menuText':menuText,
# 		u'tooltip':tooltip,
# 		u'commands':commands,
# 		u'needSudo':needSudo,
# 		u'priority':priority,
# 		u'parentMenu':parentMenu}]
# 	# fileData=readCommands()
# 	with open(self._getSshCommandFile(), 'a') as f:
# 		# f.write(fileData)
# 		json.dump(data, f)
# 		# return True
# 	# return False

def readCommands(self):
	import json
	import types
	content=[]
	with open(self._getSshCommandFile(), 'r') as f:
		content=f.read().split()
		if not isinstance(content, types.ListType):
			raise TypeError("file content should be from type list")
		return content

		# #content=f.read()
		# #if content is None or "":
		# content=[]
		# #el
		# if not isinstance(content, types.ListType):
		# 	raise TypeError("content should from type list")
		# return json.load(content)


def updateCommand(self, name, menuText):
	#import types
	newDataDic={u'name':name, u'menuText':menuText}
	fileData=self.readCommands()
	

	for objdic in fileData:
		if objdic["name"]==newDataDic["name"]:
			objdic.update(newDataDic)
		self._writeFileWith(fileData)
	return fileData	

def deleteCommand(self,name):
	#import types
	fileData=self.readCommands()
	#if not isinstance(fileData, types.ListType):
	#	raise TypeError("content should from type list")
	for objdic in fileData:
		if objdic["name"]==name:
			fileData.remove(objdic)
	self._writeFileWith(fileData)
	return fileData




def _getSshCommandFile(self, filename=u'/home/sucher/tmp/json/com.json'):
	import os.path
	if not os.path.isfile(filename):
		with open(filename, 'w') as f:
			#content=[]
			f.write("")
		#self._writeFileWith("[]")
	return filename

# def _setSshCommandFile(self, filename):
	# return u'/home/sucher/tmp/json/com.json'

def _writeFileWith(self, content, mode='w'):
	import json
	with open(self._getSshCommandFile(), 'w') as f:
		f.write(str(content))
	#filecontent=json.dumps(listcom,sort_keys=True)
	#return filecontent
def _deleteSshCommandFileContent(self):
	self._writeFileWith("")