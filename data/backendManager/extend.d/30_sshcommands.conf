# -*- coding: utf-8 -*-


def SSHCommand_getObjects(self):
	return self.getSSHCommands()
def SSHCommand_getObject(self, value, key="menuText"):
	return self.getSSHCommand(value, key)

def getSSHCommands(self, create_new_file=False):
	import json
	if create_new_file:
		return self._createNewSSHCommandFile()
	filecontent=[]
	with open(self._getSSHCommandFilename(), 'r') as f:
		try:
			for line in f:
				filecontent.append(json.loads(line))
			# filecontent = json.load(f)
		except ValueError as ve:
			print( u' ValueError can not load file')
			print(ve)
			self._getSSHCommandFile()
	assert isinstance(filecontent, list), u'json file content ({}) should be from type list '.format(self._getSSHCommandFilename())
	# print("filecontent type {}".format(type(filecontent)))
	for element in filecontent:
		# print("element in filecontent type {}".format(type(element)))
		assert isinstance(element, dict), u'expected elements(single commands) of type dictionary'
	return filecontent

def getSSHCommand(self, value, key="menuText"):
	existingCommands=self.getSSHCommands()
	for command in existingCommands:
		if command[key]==value:
			return command
	return None


def SSHCommand_createObjects(self, command_list):
	return self.createSSHCommands(command_list)
def SSHCommand_createObject(self,menuText,command_list,position=0,needSudo=False,tooltipText=u'',parentMenuText=None ):
	return self.createSSHCommand(menuText, command_list, position, needSudo ,tooltipText, parentMenuText )

def createSSHCommands(self, command_list):
	assert isinstance(command_list, list), u'method parameter "command_list" should be from type list'
	for com in command_list:
		assert isinstance(com, dict), u'expected elements(single commands) of type dictionary'
		if not com["menuText"]:
			raise Exception(u'menuText missing')
		self._writeSSHCommand(com)
	return self.getSSHCommands()

def createSSHCommand(self,menuText,command_list,position=20, needSudo=False ,tooltipText=u'', parentMenuText=None ):
	com=self._getSSHCommandDict( menuText, command_list, position, needSudo, tooltipText, parentMenuText)
	return self._writeSSHCommand(com)



def SSHCommand_updateObjects(self, commands):
	return self.updateSSHCommands(commands)
def SSHCommand_updateObject(self, menuText, command_list=None, position=None, needSudo=False ,tooltipText=None, parentMenuText=None ):
	return self.updateSSHCommand(id,menuText,command_list, position, needSudo, tooltipText, parentMenuText)

def updateSSHCommand(self, menuText, command_list=None, position=None, needSudo=False ,tooltipText=None, parentMenuText=None ):
	existingCommands=self.getSSHCommands()
	com=self._getSSHCommandDict( menuText, command_list, position, needSudo, tooltipText, parentMenuText)
	return self._writeSSHCommand(com,True)

def updateSSHCommands(self, commands):
	assert isinstance(commands, list), u'commands should be from type list'
	for com in commands:
		assert isinstance(com, dict), u'expected elements of type dictionary'
		self._writeSSHCommand(com, True)
	return self.getSSHCommands()




def SSHCommand_deleteObjects(self, value_list, key="menuText"):
	return self.deleteSSHCommands(value_list, key)
def SSHCommand_deleteObject(self, value, key="menuText"):
	return self.deleteSSHCommand(value, key)

def deleteSSHCommands(self, value_list, key="menuText"):
	assert isinstance(value_list, list), u'value_list should be from type list'
	# for value in value_list:
		# assert isinstance(value, unicode), u'expected values should be of type unicode'
	# self._checkSSHCommandList(ids)
	for value in value_list:
		self.deleteSSHCommand( value, key)
	return self.getSSHCommands()

def deleteSSHCommand(self, value, key="menuText"):
	existingCommands=self.getSSHCommands()
	for command in existingCommands:
		if command[key]==value:
			existingCommands.remove(command)
			self._writeSSHCommandFileWith(existingCommands)
	return self.getSSHCommands()


# def deleteSSHCommandBy(self, value, key=""):
# 	existingCommands=self.getSSHCommands()
# 	for command in existingCommands:
# 		if command[key]==value:
# 			existingCommands.remove(command)
# 			self._writeSSHCommandFileWith(existingCommands)
# 	return self.getSSHCommands()

def _writeSSHCommand(self, command, overwrite=False):
	existingCommands=self.getSSHCommands()
	exists=False
	if len(existingCommands) > 0:
		for existingCommand in existingCommands:
			if command["menuText"] == existingCommand["menuText"]:
				exists=True
				if overwrite:
					for key, value in command.items():
						if value:
							existingCommand[key]= value
					self._writeSSHCommandFileWith(existingCommands)
	if exists and not overwrite:
		raise Exception(u'Command already exists')
	elif not exists:
		existingCommands.append(command)
		self._writeSSHCommandFileWith(existingCommands)
	return self.getSSHCommands()

def _getSSHCommandDict(self,  menuText, command_list, position=20, needSudo=False ,tooltipText=u'', parentMenuText=None ):
	assert isinstance(command_list, list), u'commands should be from type list'
	assert isinstance(position, int), u'position should be from type int'
	assert isinstance(needSudo, bool), u'needSudo should be from type bool'
	comDict={"id":self._generateId(menuText), "menuText":menuText, "commands":command_list, "position":position, "needSudo":needSudo, "tooltipText":tooltipText, "parentMenuText":parentMenuText }
	return comDict

def _generateId(self, menuText):
	return menuText.lower().replace(" ", "_")

def _getSSHCommandFile(self):
	import os.path
	if not os.path.isfile(self._getSSHCommandFilename()):
		self._createNewSSHCommandFile()
		#print(u'file did not exists, but is created')
	return self._getSSHCommandFilename()

def _writeSSHCommandFileWith(self, content, mode='w'):
	import json
	with open(self._getSSHCommandFilename(), mode) as f:
		try:
			for element in content:
				json.dump(element, f)
				f.write('\n')
			# json.dump(content,f)
		except Exception as e:
			print(e)

def _createNewSSHCommandFile(self):
	command1= {"id":"rechte_setzen", "menuText":"Rechte setzen", "commands":["opsi-set-rights"], "position":30,"needSudo":True, "tooltipText":"Rechte mittels opsi-set-rights setzen", "parentMenuText":"opsi" }
	command2= {"id":"konfiguration_initalisieren", "menuText":"Konfiguration initalisieren", "commands":["opsi-setup --init-current-config"], "position":40, "needSudo":True, "tooltipText":"Konfiguration initialisieren", "parentMenuText":"opsi" }

	command5={"id":"produkte_aktualisieren", "menuText":"Produkte aktualisieren", "commands":["opsi-productupdater -i -vv"], "position":50, "needSudo":True, "tooltipText":"Standard opsi-Produkte aktualisieren", "parentMenuText":"opsi" }

	command3={"id":"opsiconfd_neustarten","menuText":"opsiconfd neustarten","commands":["service opsiconfd restart"],"position":60, "needSudo":True, "tooltipText":"opsiconfd-Service neustarten", "parentMenuText":"opsi" }
	command4={"id":"opsipxeconfd_neustarten", "menuText":"opsipxeconfd neustarten", "commands":["service opsipxeconfd restart"], "position":70, "needSudo":True, "tooltipText":"opsipxeconfd-Service neustarten", "parentMenuText":"opsi" }


	command_list=[]
	command_list.append(command1)
	command_list.append(command2)
	command_list.append(command5)
	command_list.append(command3)
	command_list.append(command4)
	self._writeSSHCommandFileWith(command_list)
	return self.getSSHCommands()

def _getSSHCommandFilename(self):
	return u'/etc/opsi/server_commands.conf'
