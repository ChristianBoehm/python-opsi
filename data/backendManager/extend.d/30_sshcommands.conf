# -*- coding: utf-8 -*-


def SSHCommand_getObjects(self):
	return self.getSSHCommands()

def getSSHCommands(self, create_new_file=False):
	import json
	if create_new_file:
		return self._createNewSSHCommandFile()
	filecontent=''
	with open(self._getSSHCommandFilename(), 'r') as f:
		try:
			filecontent = json.load(f)
		except ValueError as ve:
			print( u' ValueError can not load file')
			print(ve)
			self._getSSHCommandFile()
	assert isinstance(filecontent, list), u'json file content ({}) should be from type list '.format(self._getSSHCommandFilename())
	for element in filecontent:
		assert isinstance(element, dict), u'expected elements(single commands) of type dictionary'
	return filecontent

def SSHCommand_createObjects(self, command_list):
	return self.createSSHCommands(command_list)

def createSSHCommands(self, command_list):
	assert isinstance(command_list, list), u'method parameter "command_list" should be from type list'
	for com in command_list:
		assert isinstance(com, dict), u'expected elements(single commands) of type dictionary'
		if not com["menuText"]:
			raise Exception(u'menuText missing')
		if not com["commands"]:
			raise Exception(u'commands (list) missing')
		elif not isinstance(com["commands"], list):
			com["commands"] = [com["commands"]]
		self._writeSSHCommand(com)
	return self.getSSHCommands()

def SSHCommand_createObject(self,id,command_list,menuText,priority=20,needSudo=False,tooltipText=u'',parentMenuText=None ):
	return self.createSSHCommand(id, command_list, menuText, priority, needSudo ,tooltipText, parentMenuText )

def createSSHCommand(self,id,command_list,menuText,priority=20, needSudo=False ,tooltipText=u'', parentMenuText=None ):
	com=self._getSSHCommandDict(id, menuText, command_list, priority, needSudo, tooltipText, parentMenuText)
	return self._writeSSHCommand(com)


def SSHCommand_updateObject(self, id, command_list=None, menuText=None, priority=None, needSudo=False ,tooltipText=None, parentMenuText=None ):
	return self.updateSSHCommand(id,command_list, menuText, priority, needSudo, tooltipText, parentMenuText)

def updateSSHCommand(self, id, command_list=None, menuText=None, priority=None, needSudo=False ,tooltipText=None, parentMenuText=None ):
	existingCommands=self.getSSHCommands()
	com=self._getSSHCommandDict(id, menuText, command_list, priority, needSudo, tooltipText, parentMenuText)
	return self._writeSSHCommand(com,True)

def SSHCommand_updateObjects(self, commands):
	return self.updateSSHCommands(commands)

def updateSSHCommands(self, commands):
	assert isinstance(commands, list), u'commands should be from type list'
	for com in commands:
		assert isinstance(com, dict), u'expected elements of type dictionary'
		self._writeSSHCommand(com, True)
	return self.getSSHCommands()

def SSHCommands_deleteObjects(self, ids):
	return self.deleteSSHCommands(ids)

def deleteSSHCommands(self, ids):
	assert isinstance(ids, list), u'ids should be from type list'
	for id in ids:
		assert isinstance(id, str), u'expected id should be of type str'
	# self._checkSSHCommandList(ids)
	for id in ids:
		self.deleteSSHCommand(id)
	return self.getSSHCommands()

def SSHCommands_deleteObject(self, id):
	return self.deleteSSHCommand(id)

def deleteSSHCommand(self,id):
	existingCommands=self.getSSHCommands()
	for command in existingCommands:
		if command["id"]==id:
			existingCommands.remove(command)
			self._writeSSHCommandFileWith(existingCommands)
	return self.getSSHCommands()


def _writeSSHCommand(self, command, overwrite=False):
	existingCommands=self.getSSHCommands()
	exists=False
	if len(existingCommands) > 0:
		for existingCommand in existingCommands:
			if command["id"] == existingCommand["id"]:
				exists=True
				if overwrite:
					for key, value in command.items():
						if value:
							existingCommand[key]= value
					self._writeSSHCommandFileWith(existingCommands)
	if exists and not overwrite:
		raise Exception(u'Command already exists')
	elif not exists:
		existingCommands.append(command)
		self._writeSSHCommandFileWith(existingCommands)
	return self.getSSHCommands()

def _getSSHCommandDict(self, id, menuText, command_list, priority=20, needSudo=False ,tooltipText=u'', parentMenuText=None ):
	assert isinstance(command_list, list), u'commands should be from type list'
	assert isinstance(priority, int), u'priority should be from type int'
	assert isinstance(needSudo, bool), u'needSudo should be from type bool'
	comDict={"id":id, "menuText":menuText, "commands":command_list, "priority":priority, "needSudo":needSudo, "tooltipText":tooltipText, "parentMenuText":parentMenuText }
	return comDict

def _getSSHCommandFile(self):
	import os.path
	if not os.path.isfile(self._getSSHCommandFilename()):
		self._createNewSSHCommandFile()
		#print(u'file did not exists, but is created')
	return self._getSSHCommandFilename()

def _writeSSHCommandFileWith(self, content, mode='w'):
	import json
	with open(self._getSSHCommandFilename(), mode) as f:
		try:
			json.dump(content,f)
		except Exception as e:
			print(e)

def _createNewSSHCommandFile(self):
	command1={"id":"opsisetrights", "menuText":"opsi Rechte setzten", "commands":["opsi-set-rights"], "prioriry":10, "needSudo":False, "tooltipText":"Rechte mittels opsi-set-rights setzten", "parentMenuText":None }
	command2={"id":"opsiinitconfig", "menuText":"opsi Konfiguration initalisieren", "commands":["opsi-setup --init-current-config"], "prioriry":11, "needSudo":False, "tooltipText":"Konfiguration initialisieren", "parentMenuText":None }
	command_list=[]
	command_list.append(command1)
	command_list.append(command2)
	self._writeSSHCommandFileWith(command_list)
	return self.getSSHCommands()

def _getSSHCommandFilename(self):
	return u'/etc/opsi/backends/sshcommands.conf'