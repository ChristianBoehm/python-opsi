# -*- coding: utf-8 -*-

def getKioskProductInfosForClient(self, clientId):
	"""
	Collect the data as required by the opsi kiosk client.

	:param clientId: ID of the client for whom the data gets collected.
	:type clientId: str
	:returntype: [{...}]
	:raises BackendMissingDataError: If no client with clientId exists.
	:raises Exception: In case something goes wrong.
	"""
	from OPSI.Types import forceBool

	hosts = self.host_getIdents(id=clientId, type="OpsiClient")
	try:
		clientId = hosts.pop()  # get first element
	except IndexError:
		from OPSI.Types import BackendMissingDataError
		raise BackendMissingDataError("Unknown host {0!r}".format(clientId))

	try:
		softwareOnDemandGroups = self.getGeneralConfigValue('software-on-demand.product-group-ids', clientId).split(",")
		productIds = set(x.objectId for x in self.objectToGroup_getObjects(groupId=softwareOnDemandGroups, groupType="ProductGroup"))
		depotId = self.getDepotId(clientId)
		productOnDepots = self.productOnDepot_getObjects(depotId=depotId, productId=productIds)
		productDependencies = self.productDependency_getObjects(productId=productIds)
		productOnClients = self.productOnClient_getObjects(clientId=[clientId], productId=productIds)
		products = self.product_getObjects(id=productIds)
	except Exception as error:
		logger.logException(error)
		raise Exception("Collecting kiosk data failed: {0}".format(error))

	result = []
	for productId in productIds:
		productDataRecord = {
			'productId': productId,
			'versionStr': "",
			'installedVerStr': "",
			'installedProdVer': "",
			'installedPackVer': "",
			'updatePossible': False,
			'possibleAction': "",
			'installationStatus': "",
			'actionRequest': "",
			'actionResult': "",
		}

		for pod in productOnDepots:
			if productId == pod.productId:
				productDataRecord['versionStr'] = "%s-%s" % (pod.productVersion, pod.packageVersion)
				productDataRecord['productVersion'] = pod.productVersion
				productDataRecord['packageVersion'] = pod.packageVersion
				break

		requirements = []
		for dep in productDependencies:
			if not dep.productId == productId:
				continue

			requirement = {
				"requiredProductId": dep.requiredProductId,
				"required": "",
				"preRequired": "",
				"postRequired": "",
			}

			if dep.requirementType == "before":
				destination = "prerequired"
			elif dep.requirementType == "after":
				destination = "postrequired"
			else:
				destination = "required"

			if dep.requiredAction:
				requirement[destination] = dep.requiredAction
			elif dep.requiredInstallationStatus:
				requirement[destination] = dep.requiredInstallationStatus
			requirements.append(requirement)

		productDataRecord['requirements'] = requirements
		for prod in products:
			if prod.id != productId or prod.productVersion != productDataRecord['productVersion'] or prod.packageVersion != productDataRecord['packageVersion']:
				continue

			productDataRecord['hasSetup'] = forceBool(prod.setupScript)
			productDataRecord['hasUninstall'] = forceBool(prod.uninstallScript)
			productDataRecord['productName'] = prod.name
			productDataRecord['description'] = prod.description
			productDataRecord['advice'] = prod.advice
			productDataRecord['priority'] = prod.priority
			productDataRecord['productType'] = prod.getType()

		for poc in productOnClients:
			if poc.productId != productId:
				continue
			productDataRecord['installationStatus'] = poc.installationStatus
			productDataRecord['actionRequest'] = poc.actionRequest
			productDataRecord['actionResult'] = poc.actionResult
			productDataRecord['installedProdVer'] = poc.productVersion
			productDataRecord['installedPackVer'] = poc.packageVersion
			productDataRecord['installedVerStr'] = "%s-%s" % (poc.productVersion, poc.packageVersion)
			if productDataRecord['installedVerStr'] != productDataRecord['versionStr']:
				productDataRecord['updatePossible'] = True
			else:
				productDataRecord['updatePossible'] = False
			if poc.installationStatus == 'not_installed' and productDataRecord['hasSetup']:
				productDataRecord['possibleAction'] = 'setup'
			if poc.installationStatus == 'installed' and productDataRecord['hasUninstall']:
				productDataRecord['possibleAction'] = 'uninstall'
		result.append(productDataRecord)

	return result
