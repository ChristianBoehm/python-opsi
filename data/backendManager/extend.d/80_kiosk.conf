# -*- coding: utf-8 -*-

def getKioskProductInfosForClient(self, clientId):
	"""
		Collect initial data for KIOSK

	:param clientdId the ID for the client
	:type string: Takes exactly one client
	"""
	try:
		softwareOnDemandGroups = split(",", self.getGeneralConfigValue('software-on-demand.product-group-ids', clientId))
		productIds = [x.productId for x in self.objectToGroup_getObjects(groupId = softwareOnDemandGroups)]
		depotId = self.getDepotId([clientId])
		productOnDepots = self.productOnDepot(depotId=depotId, productId=productIds)
		productDependencies = self.productDependency_getObjects(productId=productIds)
		productOnClients = self.productOnClient_getObjects(clientId=[clientId],productId=productIds)
		products = self.product_getObjects(productId=productIds)

		result = []
		for product in productIds:
			productDataRecord = {
				'versionstr':"",
			}

			for pod in productOnDepots:
				if product == pod.productId:
					productDataRecord['versionstr'] = "%s-%s" % (pod.productVersion, pod.packageVersion)
					productDataRecord['productversion'] = pod.productVersion
					productDataRecord['packageversion'] = pod.packageVersion
					break

			requirements = []
			for dep in productDependencies:
				if not dep.productId == productId:
					continue

				req = {
					"requiredProductId": dep.requiredProductId,
					"required":"",
					"prerequired":"",
					"postrequired":"",
				}

				destination = "required"
				if dep.requirementType == "before":
					destination = "prerequired"
				elif dep.requirementType == "after":
					destination = "postrequired"

				if dep.requiredAction: req[destination] = dep.requiredAction
				if dep.requiredInstallationStatus: req[destination] = dep.requiredInstallationStatus
				requirements.append(req)

			productDataRecord['requirements'] = requirements
			for prod in products:
				if prod.productId != productId or prod.productVersion != productDataRecord['productversion'] or prod.packageVersion != productDataRecord['packageversion']:
					continue

				productDataRecord['hasSetup'] = forceBool(prod.setupScript)
				productDataRecord['hasUninstall'] = forceBool(prod.uninstallScript)
			#for poc in productOnClients:




	except Exception as e:
		return "Failed: '%s'" % e
