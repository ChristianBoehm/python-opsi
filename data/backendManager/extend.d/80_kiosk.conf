# -*- coding: utf-8 -*-

def getKioskProductInfosForClient(self, clientId):
	"""
	Collect the data as required by the opsi kiosk client.

	:param clientId: ID of the client for whom the data gets collected.
	:type clientId: str
	:returntype: [{...}]
	"""
	from OPSI.Types import forceBool

	try:
		softwareOnDemandGroups = self.getGeneralConfigValue('software-on-demand.product-group-ids', clientId).split(",")
		productIds = [x.objectId for x in self.objectToGroup_getObjects(groupId=softwareOnDemandGroups)]
		depotId = self.getDepotId(clientId)
		productOnDepots = self.productOnDepot_getObjects(depotId=depotId, productId=productIds)
		productDependencies = self.productDependency_getObjects(productId=productIds)
		productOnClients = self.productOnClient_getObjects(clientId=[clientId], productId=productIds)
		products = self.product_getObjects(id=productIds)

		result = []
		for productId in productIds:
			productDataRecord = {
				'versionStr': "",
				'productId': productId,
			}

			for pod in productOnDepots:
				if productId == pod.productId:
					productDataRecord['versionStr'] = "%s-%s" % (pod.productVersion, pod.packageVersion)
					productDataRecord['productVersion'] = pod.productVersion
					productDataRecord['packageVersion'] = pod.packageVersion
					break

			requirements = []
			for dep in productDependencies:
				if not dep.productId == productId:
					continue

				req = {
					"requiredProductId": dep.requiredProductId,
					"required": "",
					"preRequired": "",
					"postRequired": "",
				}

				destination = "required"
				if dep.requirementType == "before":
					destination = "prerequired"
				elif dep.requirementType == "after":
					destination = "postrequired"

				if dep.requiredAction:
					req[destination] = dep.requiredAction
				if dep.requiredInstallationStatus:
					req[destination] = dep.requiredInstallationStatus
				requirements.append(req)

			productDataRecord['requirements'] = requirements
			for prod in products:
				if prod.id != productId or prod.productVersion != productDataRecord['productVersion'] or prod.packageVersion != productDataRecord['packageVersion']:
					continue

				productDataRecord['hasSetup'] = forceBool(prod.setupScript)
				productDataRecord['hasUninstall'] = forceBool(prod.uninstallScript)
				productDataRecord['productName'] = prod.name
				productDataRecord['description'] = prod.description
				productDataRecord['advice'] = prod.advice
				productDataRecord['priority'] = prod.priority
				productDataRecord['productType'] = prod.getType()

			productDataRecord['installedVerStr'] = ""
			productDataRecord['installedProdVer'] = ""
			productDataRecord['installedPackVer'] = ""
			productDataRecord['updatePossible'] = ""
			productDataRecord['possibleAction'] = ""
			productDataRecord['installationStatus'] = ""
			productDataRecord['actionRequest'] = ""
			productDataRecord['actionResult'] = ""
			for poc in productOnClients:
				if poc.productId != productId:
					continue
				productDataRecord['installationStatus'] = poc.installationStatus
				productDataRecord['actionRequest'] = poc.actionRequest
				productDataRecord['actionResult'] = poc.actionResult
				productDataRecord['installedProdVer'] = poc.productVersion
				productDataRecord['installedPackVer'] = poc.packageVersion
				productDataRecord['installedVerStr'] = "%s-%s" % (poc.productVersion, poc.packageVersion)
				if productDataRecord['installedVerStr'] != productDataRecord['versionStr']:
					productDataRecord['updatePossible'] = True
				else:
					productDataRecord['updatePossible'] = False
				if poc.installationStatus == 'not_installed' and productDataRecord['hasSetup']:
					productDataRecord['possibleAction'] = 'setup'
				if poc.installationStatus == 'installed' and productDataRecord['hasUninstall']:
					productDataRecord['possibleAction'] = 'uninstall'
			result.append(productDataRecord)
		return result
	except Exception as error:
		logger.logException(e)
		raise Exception("Collecting kiosk data failed: {0}".format(error))
