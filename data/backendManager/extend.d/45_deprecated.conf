# -*- coding: utf-8 -*-

#
# DEPRECATED METHODS
# ------------------
#
# This module contains methods that are marked as deprecated.
# They will be removed in a future major release or minor release.
#
# If you are making use of these methods you should
# If there is an easy way to replace the calls a call to a deprecated
# method will issue an warning with information on what method can be
# used instead.
#

def _deprecationWarning(self, methodName, alternativeMethod=''):
	"""
	Issues a deprecation warning.

	:param methodName: Name of the method that gets deprecated.
	:type methodName: str
	:param alternativeMethod: Name of an alternative method that can be used.
	:type alternativeMethod: str
	"""
	if alternativeMethod:
		message = (
			"Call to deprecated method '{}'. "
			"This method will be removed in the future. "
			"Please use the method '{}' instead."
		).format(methodName, alternativeMethod)
	else:
		message = (
			"Call to deprecated method '{}'. "
			"This method will be removed in the future. "
		).format(methodName)

	logger.warning(message)

