# -*- coding: utf-8 -*-

#
# DEPRECATED METHODS
# ------------------
#
# This module contains methods that are marked as deprecated.
# They will be removed with the next major release or minor release.
#
# If you are making use of these methods you should replace their usage.
# If there is an easy way to replace the calls a call to a deprecated
# method will issue an warning with information on what method can be
# used instead.
#

def _deprecationWarning(self, methodName, alternativeMethod=''):
	"""
	Issues a deprecation warning.

	:param methodName: Name of the method that gets deprecated.
	:type methodName: str
	:param alternativeMethod: Name of an alternative method that can be used.
	:type alternativeMethod: str
	"""
	if alternativeMethod:
		message = (
			"Call to deprecated method '{}'. "
			"This method will be removed in the future. "
			"Please use the method '{}' instead."
		).format(methodName, alternativeMethod)
	else:
		message = (
			"Call to deprecated method '{}'. "
			"This method will be removed in the future. "
		).format(methodName)

	logger.warning(message)


def createOpsiBase(self):
	self._deprecationWarning('createOpsiBase', 'backend_createBase')
	self.backend_createBase()


def createServer(self, serverName, domain, description=None, notes=None):
	self._deprecationWarning('createServer', 'host_createOpsiConfigserver')
	id = forceHostId(u'.'.join((forceHostname(serverName), forceDomain(domain))))
	self.host_createOpsiConfigserver(id=id, description=description, notes=notes)
	return id


def deleteClient(self, clientId):
	self._deprecationWarning('deleteClient', 'host_delete')
	self.host_delete(id=forceHostId(clientId))


def deleteDepot(self, depotId):
	self._deprecationWarning('deleteDepot', 'host_delete')
	self.host_delete(id=forceHostId(depotId))


def deleteGroup(self, groupId):
	self._deprecationWarning('deleteGroup', 'group_delete')
	self.group_delete(id=groupId)


def deleteProductDependency(self, productId, action="", requiredProductId="", requiredProductClassId="", requirementType="", depotIds=[]):
	self._deprecationWarning('deleteProductDependency')
	if not action:
		action = None
	if not requiredProductId:
		requiredProductId = None
	if not depotIds:
		depotIds = []

	# Warn users relying on obsolete attributes
	if requiredProductClassId:
		logger.warning("The argument 'requiredProductClassId' is obsolete and has no effect.")
	if requirementType:
		logger.warning("The argument 'requirementType' is obsolete and has no effect.")

	for productOnDepot in self.productOnDepot_getObjects(productId=productId, depotId=depotIds):
		self.productDependency_delete(
			productId=productOnDepot.productId,
			productVersion=productOnDepot.productVersion,
			packageVersion=productOnDepot.packageVersion,
			productAction=action,
			requiredProductId=requiredProductId
		)


def deleteServer(self, serverId):
	self._deprecationWarning('deleteServer', 'host_delete')
	self.host_delete(id=forceHostId(serverId))


def setHostLastSeen(self, hostId, timestamp):
	self._deprecationWarning('setHostLastSeen')
	hostId = forceHostId(hostId)
	hosts = self.host_getObjects(id=hostId)
	if not hosts:
		raise BackendMissingDataError(u"Host '%s' not found" % hostId)
	hosts[0].setLastSeen(timestamp)
	self.host_updateObject(hosts[0])


def getClients_listOfHashes(self, serverId=None, depotIds=[], groupId=None, productId=None, installationStatus=None, actionRequest=None, productVersion=None, packageVersion=None, hwFilter=None):
	self._deprecationWarning()

	def _normaliseDict(self, ddict):
		for (key, value) in ddict.items():
			if value is None:
				ddict[key] = ''

		return ddict

	import re

	serverId = serverId or []
	depotIds = depotIds or []
	groupId = groupId or []
	productId = productId or []
	installationStatus = installationStatus or []
	actionRequest = actionRequest or []
	productVersion = productVersion or []
	packageVersion = packageVersion or []
	hwFilter = hwFilter or []

	clientToDepotservers = self.configState_getClientToDepotserver(depotIds=forceHostIdList(depotIds))
	if depotIds:
		clientIds = [clientToDepotserver['clientId'] for clientToDepotserver in clientToDepotservers]

		if not clientIds:
			return []
	else:
		clientIds = []

	if groupId:
		filteredClientIds = [
			ident['objectId'] for ident
			in self.objectToGroup_getIdents(
				groupType='HostGroup',
				objectId=clientIds,
				groupId=groupId,
				returnType='dict'
			)
		]

		if not filteredClientIds:
			return []

		clientIds = filteredClientIds

	if productId or productVersion or packageVersion or installationStatus or actionRequest:
		clientIds = self.backend_searchIdents(u'(&(&(objectClass=OpsiClient)(id=%s))(&(objectClass=ProductOnClient)(productId=%s)(productVersion=%s)(packageVersion=%s)(installationStatus=%s)(actionRequest=%s)))' % \
			(clientIds, productId, productVersion, packageVersion, installationStatus, actionRequest))

		if not clientIds:
			return []

	if hwFilter:
		filter = [u'(&(&(objectClass=OpsiClient)(id=%s))' % clientIds, ]
		for (k, v) in hwFilter.items():
			(hwClass, attr) = k.split('.')
			match = re.search(r'^([<=>]=?)(\d+.*)$', v)
			if match:
				operator = match.group(1)
				v = match.group(2)
				if operator == '==':
					operator = '='
				elif operator == '<':
					operator = '<='

					try:
						v = forceInt(v) + 1
					except Exception:
						pass

				elif operator == '>':
					operator = '>='
					try:
						v = forceInt(v) - 1
					except Exception:
						pass

				v = u'%s%s' % (operator, v)
			else:
				v = u'=%s' % v

			filter.append(u'(&(objectClass=AuditHardwareOnHost)(hardwareClass=%s)(%s%s))' % (hwClass, attr, v))
		filter.append(u')')

		filter = ''.join(filter)

		clientIds = self.backend_searchIdents(filter)
		if not clientIds:
			return []

	timestampRegex = re.compile(r'^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)$')
	result = []
	for client in self.host_getObjects(type='OpsiClient', id=clientIds):
		hash = client.toHash()
		hash['hostId'] = hash['id']

		if hash.get('created') is None:
			hash['created'] = u''
		else:
			match = timestampRegex.search(hash.get('created', ''))
			if match:
				hash['created'] = u'%s%s%s%s%s%s' % (match.group(1), match.group(2), match.group(3), match.group(4), match.group(5), match.group(6))

		if hash.get('lastSeen') is None:
			hash['lastSeen'] = u''
		else:
			match = timestampRegex.search(hash.get('lastSeen', ''))
			if match:
				hash['lastSeen'] = u'%s%s%s%s%s%s' % (match.group(1), match.group(2), match.group(3), match.group(4), match.group(5), match.group(6))

		del hash['type']
		del hash['id']

		hash['depotId'] = u''
		for clientToDepotserver in clientToDepotservers:
			if client.getId() == clientToDepotserver['clientId']:
				hash['depotId'] = clientToDepotserver['depotId']
				break

		result.append(_normaliseDict(hash))

	return result


def getClientIds_list(self, serverId=None, depotIds=[], groupId=None, productId=None, installationStatus=None, actionRequest=None, productVersion=None, packageVersion=None, hwFilter=None):
	self._deprecationWarning()
	return [client['hostId'] for client in self.getClients_listOfHashes(serverId, depotIds, groupId, productId, installationStatus, actionRequest, productVersion, packageVersion, hwFilter)]
