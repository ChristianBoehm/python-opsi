# -*- coding: utf-8 -*-


def _deprecationWarning(self, methodName, alternativeMethod=''):
	"""
	Issues a deprecation warning.

	:param methodName: Name of the method that gets deprecated.
	:type methodName: str
	:param alternativeMethod: Name of an alternative method that can be used.
	:type alternativeMethod: str
	"""
	if alternativeMethod:
		message = (
			"Call to deprecated method '{}'. "
			"This method will be removed in the future. "
			"Please use the method '{}' instead."
		).format(methodName, alternativeMethod)
	else:
		message = (
			"Call to deprecated method '{}'. "
			"This method will be removed in the future. "
		).format(methodName)

	logger.warning(message)


def isLegacyOpsi(self):
	self._deprecationWarning('isLegacyOpsi', alternativeMethod='backend_info')
	return False


def isOpsi35(self):
	self._deprecationWarning('isOpsi35', alternativeMethod='backend_info')
	return False


def isOpsi4(self):
	self._deprecationWarning('isOpsi4', alternativeMethod='backend_info')
	return True
