Wichtig beim Update von Objekten:
Nur die Attribute setzen die geändert werden sollen!
Sonst werden u.U. Backends unnötig aktiv!

Bsp.:
hosts = host_getObjects(['lastSeen'], id = 'myhost.uib.local')
host = hosts[0]
host.setLastSeen(timestamp())
host_updateObjects(host)

Oder:
hosts = host_getObjects(id = 'myhost.uib.local')
host = hosts[0]
host.emptyValues()
host.setLastSeen(timestamp())
host_updateObjects(host)

=============================================================================================================


-------------------------------------------------------------------------------------------------------------
ConfigDataBackend(Backend):
   Basis-Klasse für Daten-Backends
   Aufgaben: Wahrung der referentiellen Integrität aber keine Änderungen an übergebenen Objekten

_testFilterAndAttributes(Class, attributes, **filter)
   Attribute (attributes, unicode-list) und filter (Hash) auf Zulässigkeit für die
   Opsi-Objekt-Klasse Class prüfen

<oc>_insertObject(obj)
   Objekt wird erzeugt oder überschrieben, beim Überschreiben wird auch der Wert None/null in das Backend übertragen

<oc>_getObjects(attributes = [], **filter)
   Objekte aus ConfigDataBackend auslesen
   Bei Angabe einer Liste von Attributen, nur diese auslesen, andere Attribute sind dann None/null
   Attribute die zum eindeutigen Identfizieren eines Objektes innerhalb seiner Objektklasse dienen (ident) werden
   in jedem Fall ausgelesen
   Mit Hilfe eines Filters kann die Menge der zurückgegebenen Objekte eingeschränkt werden.

<oc>_updateObject(obj)
   Objekt wird aktualisiert, Fehler wenn Objekt nicht existiert, Attribute mit dem Wert None/null werden nicht aktualisiert

<oc>_deleteObjects(objs)
   Die übergebenen Objekte (Liste) werden aus dem Backend gelöscht, nicht existierende Objekte werden ignoriert


-------------------------------------------------------------------------------------------------------------
ExtendedConfigDataBackend(ExtendedBackend):
   Erweiterung eines ConfigDataBackends um zusätzliche Funktionalität (Methoden)

__init__(configDataBackend)
   Konstruktor

backend_searchObjects(filter)
   Suche nach Objekten per LDAP-Filter

<oc>_getIdents(returnType='unicode', **filter)
   Siehe <oc>_getObjects, jedoch ausschliesslich Rückgabe von Objekt-Idents
   Es wird immer eine Liste zurückgegeben
   Über den returnType kann der Typ der Listen-Elemente definiert werden
   Zulässige returnTypes sind:
      unicode   : unicode-String, Werte der Ident-Attribute werden mit ';' zusammengefügt
      list      : Liste der Ident-Attribut-Werte
      tuple     : Tuple der Ident-Attribut-Werte
      dict/hash : Hash der Ident-Attribute und zugehöriger Werte

<oc>_createObjects(objs)
   Anlegen der übergebenen Objekte (Liste) mit Hilfe von <oc>_insertObject

<oc>_updateObjects(objs)
   Aktualisieren der übergebenen Objekte (Liste) mit Hilfe von <oc>_updateObject
   Sollte ein Objekt nicht existieren wird auf <oc>_insertObject ausgewichen!

auditHardwareOnHost_insertObject(auditHardwareOnHost)
   auditHardwareOnHost wird exakt wie angegeben erstellt
