''' = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
=     Interface definition                                                =
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = '''

def writeLog(self, type, data, objectId=None, append=True):
	'''
	This method logs the specified data.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		if objectId:
			self._verifyUser(objectId)
		else:
			raise
	
	# Implementation
	return self._execMethod(self.loggingBackend, 'writeLog', type, data, objectId, append)

def readLog(self, type, objectId=None, maxSize=0):
	'''
	This method returns logged information.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		if objectId:
			self._verifyUser(objectId)
		else:
			raise
	
	# Implementation
	return self._execMethod(self.loggingBackend, 'readLog', type, objectId, maxSize)

def createOpsiBase(self):
	'''
	This method will creates a basis to store configuration, depending on the used backend.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'createOpsiBase')

def getGeneralConfig_hash(self, objectId=None):
	''' 
	Returns the general opsi configuration for an organizational object (host, group, domain, ...). 
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(objectId)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getGeneralConfig_hash', objectId)

def getGeneralConfigValue(self, key, objectId=None):
	# Implementation
	return self.getGeneralConfig_hash(objectId = objectId).get(key)

def setGeneralConfig(self, config, objectId=None):
	'''
	Creates a general opsi configuration for an organizational object (host, group, domain, ...).
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(objectId)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'setGeneralConfig', config, objectId)

def setGeneralConfigValue(self, key, value, objectId=None):
	# Implementation
	config = self.getGeneralConfig_hash(objectId = objectId)
	config[key] = value
	return self.setGeneralConfig(config = config, objectId = objectId)

def deleteGeneralConfig(self, objectId):
	'''
	Deletes a general opsi configuration for an organizational object (host, group, domain, ...).
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(objectId)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'deleteGeneralConfig', objectId)

def setNetworkConfig(self, config, objectId=None):
	''' 
	Creates a network configuration for an organizational object (host, group, domain, ...).
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(objectId)
	
	# Implementation
	return self._execMethod(self.clientManagingBackend, 'setNetworkConfig', config, objectId)

def setNetworkConfigValue(self, key, value, objectId=None):
	# Implementation
	config = self.getNetworkConfig_hash(objectId = objectId)
	config[key] = value
	return self.setNetworkConfig(config = config, objectId = objectId)
	
def getNetworkConfig_hash(self, objectId=None):
	''' 
	Returns the network configuration for an organizational object (host, group, domain, ...).
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(objectId)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getNetworkConfig_hash', objectId)

def getNetworkConfigValue(self, key, objectId=None):
	# Implementation
	return self.getNetworkConfig_hash(objectId = objectId).get(key)

def deleteNetworkConfig(self, objectId):
	'''
	Deletes a network configuration for an organizational object (host, group, domain, ...).
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(objectId)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'deleteNetworkConfig', objectId)

def getGroupIds_list(self):
	'''
	Returns the list of all known group ids.
	'''
	# Security
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getGroupIds_list')

def getHostGroupTree_hash(self):
	'''
	Returns the list of all known group ids.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getHostGroupTree_hash')

def createGroup(self, groupId, members=[], description="", parentGroupId=""):
	'''
	Creates a group (for hosts).
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'createGroup', groupId, members, description, parentGroupId)

def deleteGroup(self, groupId):
	'''
	Deletes a group.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'deleteGroup', groupId)

def getHostId(self, hostname=None):
	'''
	Returns the id of the host specified by hostname.
	'''
	# Security
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getHostId', hostname)

def setPXEBootConfiguration(self, hostId, args={}):
	'''
	This method will set a PXE boot configuration for a host.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.pxebootconfBackend, 'setPXEBootConfiguration', hostId, args)

def unsetPXEBootConfiguration(self, hostId):
	'''
	This method will unset the PXE boot configuration for a host.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.pxebootconfBackend, 'unsetPXEBootConfiguration', hostId)

def powerOnHost(self, hostId):
	'''
	This method is used to switch-on a computer
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	macs = self.getMacAddresses_list(hostId)
	if not macs:
		raise BackendMissingDataError("Failed to power-on host '%s': no mac address found!" % hostId)
	for mac in macs:
		self._execMethod(BACKEND_WAKEONLAN, 'powerOnHost', mac)

def getIpAddress(self, hostId):
	'''
	Returns the ip address of an host given by id.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getIpAddress', hostId)

def createServer(self, serverName, domain, description=None, notes=None):
	'''
	This method will create a new OPSI depotserver configuration
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	serverId = self._execMethod(self.defaultBackend, 'createServer', serverName, domain, description, notes)
	try:
		self._execMethod(self.pckeyBackend, 'getOpsiHostKey', serverId)
	except:
		opsiHostKey = generateOpsiHostKey()
		self._execMethod(self.pckeyBackend, 'setOpsiHostKey', serverId, opsiHostKey)
	return serverId

def createClient(self, clientName, domain=None, description=None, notes=None, ipAddress=None, hardwareAddress=None):
	'''
	This method will create a new OPSI client configuration
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		if not domain:
			raise
		self._verifyUser(clientName + '.' + domain)
	
	# Implementation
	clientId = self._execMethod(self.clientManagingBackend, 'createClient', clientName, domain, description, notes, ipAddress, hardwareAddress)
	opsiHostKey = ''
	try:
		opsiHostKey = self.getOpsiHostKey(clientId)
	except:
		opsiHostKey = generateOpsiHostKey()
		self.setOpsiHostKey(clientId, opsiHostKey)
	
	serverKey = self._execMethod(self.pckeyBackend, 'getOpsiHostKey', self.getServerId(clientId))
	encryptedPcpatchPass = self._execMethod(self.passwordBackend, 'getPcpatchPassword', self.getServerId(clientId))
	self._execMethod(self.passwordBackend, 'setPcpatchPassword', clientId, blowfishEncrypt(opsiHostKey, blowfishDecrypt(serverKey, encryptedPcpatchPass)))
	
	try:
		if not self.getHardwareInformation_hash(clientId):
			self.setHardwareInformation(clientId, {})
	except:
		pass
	try:
		if not self.getSoftwareInformation_hash(clientId):
			self.setSoftwareInformation(clientId, {})
	except:
		pass

	return clientId
	
def deleteServer(self, serverId):
	'''
	This method deletes an OPSI server configuration
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	self.deleteOpsiHostKey(serverId)
	return self._execMethod(self.defaultBackend, 'deleteServer', serverId)

def deleteClient(self, clientId):
	'''
	This method deletes an OPSI client configuration
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	modules = self.getOpsiInformation_hash()['modules']
	if modules.get('valid') and modules.get('license_management'):
		self.deleteAllSoftwareLicenseUsages([ clientId ])
	try:
		self.deleteSoftwareInformation(clientId)
	except:
		pass
	try:
		self.deleteHardwareInformation(clientId)
	except:
		pass
	self.deleteOpsiHostKey(clientId)
	return self._execMethod(self.clientManagingBackend, 'deleteClient', clientId)

def setHostLastSeen(self, hostId, timestamp):
	'''
	This method is used to set the time of the last established connection from a host
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'setHostLastSeen', hostId, timestamp)

def setHostDescription(self, hostId, description):
	'''
	This method is used to set the description of a host
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'setHostDescription', hostId, description)

def setHostNotes(self, hostId, notes):
	'''
	This method is used to set the notes of a host
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'setHostNotes', hostId, notes)

def getHardwareInformation_listOfHashes(self, hostId):
	'''
	Deprecated.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.hwinventBackend, 'getHardwareInformation_listOfHashes', hostId)

def getSoftwareInformation_hash(self, hostId):
	'''
	This method returns the software inventory information stored for the host given by id.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.swinventBackend, 'getSoftwareInformation_hash', hostId)

def getSoftwareInformation_listOfHashes(self):
	'''
	This method returns informations for all software in the inventory.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.swinventBackend, 'getSoftwareInformation_listOfHashes')

def setSoftwareInformation(self, hostId, info):
	'''
	By using this method a software inventory can be assigned to a host.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.swinventBackend, 'setSoftwareInformation', hostId, info)

def deleteSoftwareInformation(self, hostId):
	'''
	This method deletes the software inventory of a host.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.swinventBackend, 'deleteSoftwareInformation', hostId)

def softwareInformationToProductInstallationStatus(self, hostIds=[]):
	'''
	This method sets product installation states based on software inventory results.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	if not type(hostIds) in (list, tuple):
		hostIds = [ hostIds ]
	if not hostIds:
		hostIds = self.getClientIds_list()
	windowsSoftwareIds = {}
	
	for product in self.getProducts_listOfHashes():
		if product.get("windowsSoftwareIds", []):
			for swid in product["windowsSoftwareIds"]:
				windowsSoftwareIds[swid] = product['productId']
	
	errors = []
	for hostId in hostIds:
		try:
			sw = self.getSoftwareInformation_hash(hostId)
			for (softwareId, info) in sw.items():
				if windowsSoftwareIds.has_key(softwareId):
					status = self.getProductInstallationStatus_hash(windowsSoftwareIds[softwareId], hostId)
					if (status.get("installationStatus") == "installed"):
						continue
					self.setProductState(windowsSoftwareIds[softwareId], hostId, installationStatus="installed", packageVersion="0")
		except Exception, e:
			logger.error("softwareInformationToProductInstallationStatus error: %s" % e)
			errors.append(e)
	if errors:
		raise("Error occured: %s" % errors)
	
def getHardwareInformation_hash(self, hostId):
	'''
	This method returns the hardware information stored for the host given by id.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.hwinventBackend, 'getHardwareInformation_hash', hostId)

def setHardwareInformation(self, hostId, info):
	'''
	By using this method a hardware configuration can be assigned to a host.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.hwinventBackend, 'setHardwareInformation', hostId, info)

def deleteHardwareInformation(self, hostId):
	'''
	This method deletes the stored hardware information of a host.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.hwinventBackend, 'deleteHardwareInformation', hostId)

def filterHostsByHardwareInformation(self, hostIds, hwFilter):
	'''
	Takes a list of host ids and a hardware filter (e.g. { "HW_CLASS.property": ">= 100"} ).
	Returns the list of host ids matching the filter.
	'''
	
	filteredHostIds = []
	compRegex = '([<=>]=?)\s*(.*)$'
	for hostId in hostIds:
		hw = self._execMethod(self.hwinventBackend, 'getHardwareInformation_hash', hostId)
		if not hw:
			continue
		
		matches = False
		for (key, value) in hwFilter.items():
			(hwClass, hwProperty) = key.split('.', 1)
			hwProperty
			comp = ''
			match = re.search(compRegex, value)
			if match:
				comp = match.group(1)
				value = float(match.group(2))
				if (comp == '='):
					comp = '=='
			logger.info("Testing if host '%s' matches '%s.%s' %s '%s'" % (hostId, hwClass, hwProperty, comp, value))
			matches = False
			for device in hw.get(hwClass, []):
				logger.debug("Testing device: %s" % device)
				v = device.get(hwProperty)
				if not v:
					v = device.get(hwProperty.lower())
				
				if not v and value:
					continue
				elif comp:
					if eval('%s %s %s' % (v, comp, value)):
						logger.info("Host '%s' matches '%s.%s' %s '%s'" % (hostId, hwClass, hwProperty, comp, value))
						matches = True
						continue
				else:
					try:
						if re.search(value, str(v), re.I):
							matches = True
							continue
					except Exception, e:
						raise BackendBadValueError("Bad regular expresion '%s': %s" % (value, e))
			if not matches:
				break
		if matches:
			filteredHostIds.append(hostId)
	return filteredHostIds

def getHost_hash(self, hostId):
	'''
	Returns a hash containing host information.
	'''
	# Security
	if not hostId in self.getDepotIds_list():
		try:
			self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
		except:
			self._verifyUser(hostId)
		
	# Implementation
	return self._execMethod(self.defaultBackend, 'getHost_hash', hostId)

def getClients_listOfHashes(self, serverId=None, depotIds=[], groupId=None, productId=None, installationStatus=None, actionRequest=None, productVersion=None, packageVersion=None, hwFilter=None):
	'''
	Returns a list of hashes containing client informations.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	clients = self._execMethod(self.defaultBackend, 'getClients_listOfHashes', serverId, depotIds, groupId, productId, installationStatus, actionRequest, productVersion, packageVersion)
	if hwFilter:
		clientIds = []
		for c in clients:
			clientIds.append(c['hostId'])
		clientIds = self.filterHostsByHardwareInformation(clientIds, hwFilter)
		newClients = []
		for c in clients:
			if c['hostId'] in clientIds:
				newClients.append(c)
		clients = newClients
		
	return clients
	
def getClientIds_list(self, serverId=None, depotIds=[], groupId=None, productId=None, installationStatus=None, actionRequest=None, productVersion=None, packageVersion=None, hwFilter=None):
	'''
	Returns the list of client ids.
	'''
	
	# Implementation
	clientIds = self._execMethod(self.defaultBackend, 'getClientIds_list', serverId, depotIds, groupId, productId, installationStatus, actionRequest, productVersion, packageVersion)
	if hwFilter:
		clientIds = self.filterHostsByHardwareInformation(clientIds, hwFilter)
	return clientIds

def getClientIdByMac(self, mac):
	'''
	Returns the id of the host specified by mac address.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	mac = mac.lower()
	for hostId in self.getClientIds_list():
		if (self.getMacAddress(hostId).lower() == mac):
			return hostId
	return ''

def getServerIds_list(self):
	'''
	Returns the list of all depotserver ids known to the system.
	'''
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getServerIds_list')

def getServerId(self, clientId):
	'''
	The function returns the id of the configserver a client is assigned to.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(clientId)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getServerId', clientId)

def createDepot(self, depotName, domain, depotLocalUrl, depotRemoteUrl, repositoryLocalUrl, repositoryRemoteUrl, network, description=None, notes=None, maxBandwidth=0):
	'''
	Create a new software depot.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	depotId = self._execMethod(self.defaultBackend, 'createDepot', depotName, domain, depotLocalUrl, depotRemoteUrl, repositoryLocalUrl, repositoryRemoteUrl, network, description, notes, maxBandwidth)
	try:
		self._execMethod(self.pckeyBackend, 'getOpsiHostKey', depotId)
	except:
		opsiHostKey = generateOpsiHostKey()
		self._execMethod(self.pckeyBackend, 'setOpsiHostKey', depotId, opsiHostKey)
	return depotId
	
def getDepotIds_list(self):
	'''
	Returns the list of all depotserver ids known to the system.
	'''
	# Security
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getDepotIds_list')

def getDepot_hash(self, depotId):
	'''
	Returns the the depotserver info as hash.
	'''
	# Security
	
	# Implementation
	depot = self._execMethod(self.defaultBackend, 'getDepot_hash', depotId)
	depot['ip'] = socket.gethostbyname(depotId)
	return depot

def getDepotId(self, clientId=None):
	'''
	The function returns the id of the depotserver a client is assigned to.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(clientId)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getDepotId', clientId)

def deleteDepot(self, depotId):
	'''
	The function deletes the depot given by depot id.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(clientId)
	
	# Implementation
	self.deleteOpsiHostKey(depotId)
	return self._execMethod(self.defaultBackend, 'deleteDepot', depotId)
	
def generateOpsiHostKey(self):
	'''
	Generate new opsi host key.
	'''
	return generateOpsiHostKey()
	
def getOpsiHostKey(self, hostId=None):
	'''
	Returns the host's en-/decryption key.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	if not hostId:
		return generateOpsiHostKey()
	# Implementation
	return self._execMethod(self.pckeyBackend, 'getOpsiHostKey', hostId)

def setOpsiHostKey(self, hostId, opsiHostKey):
	'''
	Sets a host's en-/decryption key to the given value.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.pckeyBackend, 'setOpsiHostKey', hostId, opsiHostKey)

def deleteOpsiHostKey(self, hostId):
	'''
	Deletes a host's key.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.pckeyBackend, 'deleteOpsiHostKey', hostId)

def getMacAddresses_list(self, hostId):
	'''
	Returns the Ethernet MAC addresses assigned to a host.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	macs = []
	try:
		macs.extend( self._execMethod(BACKEND_DHCPD, 'getMacAddresses_list', hostId) )
	except:
		pass
	
	try:
		for mac in self._execMethod(self.defaultBackend, 'getMacAddresses_list', hostId):
			if not mac in macs:
				macs.append(mac)
	except:
		pass
	
	return macs

def setMacAddresses(self, hostId, macs=()):
	'''
	Assignes Ethernet MAC addresses to a host.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.clientManagingBackend, 'setMacAddresses', hostId, macs)

def getMacAddress(self, hostId):
	'''
	Returns the Ethernet MAC address assigned to a host.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	mac = self._execMethod(self.defaultBackend, 'getMacAddress', hostId)
	if mac: return mac
	mac = ''
	try:
		mac = self._execMethod(BACKEND_DHCPD, 'getMacAddress', hostId)
	except:
		pass
	return mac
	
def setMacAddress(self, hostId, mac):
	'''
	Assignes a Ethernet MAC address to a host.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.clientManagingBackend, 'setMacAddresses', hostId, [ mac ])

def getPcpatchPassword(self, hostId):
	'''
	This method returns the password of the system user pcpatch.
	The password will be encrypted with the host's key
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.passwordBackend, 'getPcpatchPassword', hostId)

def setPcpatchPassword(self, hostId, password):
	'''
	This method sets the encrypted pcpatch password for a host
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.passwordBackend, 'setPcpatchPassword', hostId, password)

def lockProduct(self, productId, depotIds=[]):
	'''
	This method locks a product for the specified depots,
	if no depots are given the product will be locked on all depots.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'lockProduct', productId, depotIds)

def unlockProduct(self, productId, depotIds=[]):
	'''
	This method unlocks a product for the specified depots,
	if no depots are given the product will be unlocked on all depots.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'unlockProduct', productId, depotIds)

def getProductLocks_hash(self, depotIds=[]):
	'''
	This method returns a hash.
	The keys are productIds the value is a list of depotIds where the product is locked.
	'''
	# Security
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getProductLocks_hash', depotIds)

def createProduct(self, productType, productId, name, productVersion, packageVersion, licenseRequired=0,
		   setupScript="", uninstallScript="", updateScript="", alwaysScript="", onceScript="",
		   priority=0, description="", advice="", productClassNames=(), pxeConfigTemplate='',
		   windowsSoftwareIds=[], depotIds=[]):
	'''
	This method is used to store information about a OPSI product
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	if productType not in POSSIBLE_PRODUCT_TYPES:
		raise BackendBadValueError("Unknown product type: '%s'" % productType)
	
	# Implementation
	self._execMethod(self.defaultBackend, 'createProduct',
				productType, productId, name, productVersion, packageVersion, licenseRequired,
				setupScript, uninstallScript, updateScript, alwaysScript, onceScript,
				priority, description, advice, productClassNames, pxeConfigTemplate,
				windowsSoftwareIds, depotIds)

def createLocalBootProduct(self, productId, name, productVersion, packageVersion, licenseRequired=0,
		   setupScript="", uninstallScript="", updateScript="", alwaysScript="", onceScript="",
		   priority=10, description="", advice="", productClassNames=('localBoot'),
		   windowsSoftwareIds=[], depotIds=[]):
	'''
	This method is used to store information about a OPSI local-boot product
	'''
	# Security
	# security checks will be done by createProduct()
	
	# Implementation
	self.createProduct('localboot', productId, name, productVersion, packageVersion, licenseRequired,
			    setupScript, uninstallScript, updateScript, alwaysScript, onceScript,
			    priority, description, advice, productClassNames, '',
			    windowsSoftwareIds, depotIds)

def createNetBootProduct(self, productId, name, productVersion, packageVersion, licenseRequired=0,
		   setupScript="", uninstallScript="", updateScript="", alwaysScript="", onceScript="",
		   priority=10, description="", advice="", productClassNames=('netboot'), pxeConfigTemplate='',
		   windowsSoftwareIds=[], depotIds=[]):
	'''
	This method is used to store information about a OPSI net-boot product
	'''
	# Security 
	# security checks will be done by createProduct()
	
	# Implementation
	self.createProduct('netboot', productId, name, productVersion, packageVersion, licenseRequired,
			    setupScript, uninstallScript, updateScript, alwaysScript, onceScript,
			    priority, description, advice, productClassNames, pxeConfigTemplate,
			    windowsSoftwareIds, depotIds)

def createServerProduct(self, productId, name, productVersion, packageVersion, licenseRequired=0,
		   setupScript="", uninstallScript="", updateScript="", alwaysScript="", onceScript="",
		   priority=10, description="", advice="", productClassNames=('server'),
		   windowsSoftwareIds=[], depotIds=[]):
	'''
	This method is used to store information about a OPSI server product
	'''
	# Security 
	# security checks will be done by createProduct()
	
	# Implementation
	self.createProduct('server', productId, name, productVersion, packageVersion, licenseRequired,
			    setupScript, uninstallScript, updateScript, alwaysScript, onceScript,
			    priority, description, advice, productClassNames, '',
			    windowsSoftwareIds, depotIds)

def deleteProduct(self, productId, depotIds=[]):
	'''
	Deletes product informations
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'deleteProduct', productId, depotIds)
	
def getProduct_hash(self, productId, depotId=None):
	'''
	Returns a hash containing product informations.
	'''
	# Security
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getProduct_hash', productId, depotId)

def getProducts_hash(self, depotIds=[]):
	'''
	Returns a hash containing product informations of all given depots.
	'''
	# Security
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getProducts_hash', depotIds)

def getProducts_listOfHashes(self, depotId=None):
	'''
	Returns a list of hashes containing product informations.
	'''
	# Security
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getProducts_listOfHashes', depotId)

def getProductIds_list(self, productType=None, objectId=None, installationStatus=None):
	'''
	Returns a list of OPSI product ids.
	'''
	# Security
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getProductIds_list', productType, objectId, installationStatus)

def getLocalBootProductIds_list(self, objectId=None, installationStatus=None):
	'''
	Returns the list of all known OPSI local-boot product ids.
	'''
	# Security
	
	# Implementation
	return self.getProductIds_list('localboot', objectId, installationStatus)

def getNetBootProductIds_list(self, objectId=None, installationStatus=None):
	'''
	Returns the list of all known OPSI net-boot product ids.
	'''
	# Security
	
	# Implementation
	return self.getProductIds_list('netboot', objectId, installationStatus)

def getServerProductIds_list(self, objectId=None, installationStatus=None):
	'''
	Returns the list of all known OPSI server product ids.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self.getProductIds_list('server', objectId, installationStatus)

def getInstallableProductIds_list(self, clientId):
	'''
	Returns a list of all OPSI products available for a specific client
	'''
	# Security
	
	# Implementation
	return self.getProductIds_list( None, self.getDepotId(clientId) )

def getInstallableLocalBootProductIds_list(self, clientId):
	'''
	Returns a list of all OPSI local-boot products available for a specific client
	'''
	# Security
	
	# Implementation
	return self.getProductIds_list( 'localboot', self.getDepotId(clientId) )

def getInstallableNetBootProductIds_list(self, clientId):
	'''
	Returns a list of all OPSI net-boot products available for a specific client
	'''
	# Security
	
	# Implementation
	return self.getProductIds_list( 'netboot', self.getDepotId(clientId) )

def getInstalledProductIds_list(self, objectId):
	'''
	Returns a list of all OPSI products with
	installation status 'installed' for an object
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(objectId)
	
	# Implementation
	return self.getProductIds_list( None, objectId, 'installed' )

def getUninstalledProductIds_list(self, objectId):
	'''
	Returns a list of all OPSI products with
	installation status 'uninstalled' for a host
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(objectId)
	
	# Implementation
	return self.getProductIds_list( None, objectId, 'uninstalled' )

def getInstalledLocalBootProductIds_list(self, objectId):
	'''
	Returns a list of all OPSI local-boot products with
	installation status 'installed' for a host
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(objectId)
	
	# Implementation
	return self.getProductIds_list( 'localboot', objectId, 'installed' )

def getInstalledNetBootProductIds_list(self, objectId):
	'''
	Returns a list of all OPSI net-boot products with
	installation status 'installed' for a host
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(objectId)
	
	# Implementation
	return self.getProductIds_list( 'netboot', objectId, 'installed' )

def getProvidedLocalBootProductIds_list(self, depotId):
	'''
	Returns a list of all OPSI local-boot products provided by a server
	'''
	# Security
	
	# Implementation
	return self.getProductIds_list( 'localboot', depotId, 'installed' )

def getProvidedNetBootProductIds_list(self, depotId):
	'''
	Returns a list of all OPSI net-boot products provided by a server
	'''
	# Security
	
	# Implementation
	return self.getProductIds_list( 'netboot', depotId, 'installed' )

def getProductInstallationStatus_hash(self, productId, objectId):
	'''
	The method returns a hash containing a key "productId" with the value of
	the productId specified and a key "installationStatus" with
	the current installation status on the host as value.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(objectId)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getProductInstallationStatus_hash', productId, objectId)

def getProductInstallationStatus_listOfHashes(self, objectId):
	'''
	The method returns a list of installation status of all products 
	available for a specific host. The hashes contain a key "productId" 
	with the value of a productId and a key "installationStatus" containing
	the current installation status on the client as value.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(objectId)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getProductInstallationStatus_listOfHashes', objectId)

def setProductState(self, productId, objectId, installationStatus="", actionRequest="", productVersion="", packageVersion="", lastStateChange="", productActionProgress={}):
	'''
	This method is used to set a product state on a host.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(objectId)
	
	# Implementation
	productId = productId.lower()
	netBootProductIds = self.getProductIds_list(productType = 'netboot', objectId = objectId)
	isNetBoot = (productId in netBootProductIds)
	if isNetBoot and actionRequest in ('setup', 'once', 'always', 'uninstall'):
		for ar in self.getProductActionRequests_listOfHashes(objectId):
			if ar['actionRequest'] in ('setup', 'once', 'always', 'uninstall') and ar['productId'] in netBootProductIds and (ar['productId'] != productId):
				raise BackendIOError('There is already an other netboot product action request set (%s)' % ar['productId'])
	
	if (installationStatus == 'not_installed'):
		modules = self.getOpsiInformation_hash()['modules']
		if modules.get('valid') and modules.get('license_management'):
			try:
				self.deleteSoftwareLicenseUsage(hostId = objectId, productId = productId)
			except BackendMissingDataError, LicenseConfigurationError:
				pass
	
	result = self._execMethod(self.defaultBackend, 'setProductState', productId, objectId, installationStatus, actionRequest, productVersion, packageVersion, lastStateChange, productActionProgress)
	
	if isNetBoot and actionRequest:
		if actionRequest in ['none', 'by_policy', 'start_install']:
			self.unsetPXEBootConfiguration(objectId)
		elif actionRequest in ['setup', 'update', 'uninstall', 'once', 'always']:
			self.setPXEBootConfiguration(objectId)
	return result

def setProductInstallationStatus(self, productId, objectId, installationStatus):
	'''
	This method is used to set an installation status of a product on a host.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(objectId)
	
	# Implementation
	if (installationStatus == 'not_installed'):
		modules = self.getOpsiInformation_hash()['modules']
		if modules.get('valid') and modules.get('license_management'):
			try:
				self.deleteSoftwareLicenseUsage(hostId = objectId, productId = productId)
			except BackendMissingDataError, LicenseConfigurationError:
				pass
	return self._execMethod(self.defaultBackend, 'setProductInstallationStatus', productId, objectId, installationStatus)

def setProductActionProgress(self, productId, hostId, productActionProgress):
	'''
	This method is used to set the progess of a running product action for a host.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'setProductActionProgress', productId, hostId, productActionProgress)

def getPossibleProductActions_list(self, productId=None, depotId=None):
	'''
	Returns a list of available actions for the given product.
	'''
	# Security
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getPossibleProductActions_list', productId, depotId)

def getPossibleProductActions_hash(self, depotId=None):
	'''
	Returns a hash containing possible actions for every product.
	'''
	# Security
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getPossibleProductActions_hash', depotId)

def getProductActionRequests_listOfHashes(self, clientId, options={}):
	'''
	Returns the list of all product actions requested for a host.
	The keys of the hashes are "productId" and "actionRequest".
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(clientId)
	
	# Implementation
	productActionRequests = self._execMethod(self.defaultBackend, 'getProductActionRequests_listOfHashes', clientId)
	return self.adjustProductActionRequests( productActionRequests, clientId, options )

def getDefaultNetBootProductId(self, clientId):
	'''
	The method returns the default operating system id set for a client.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(clientId)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getDefaultNetBootProductId', clientId)
	
def setProductActionRequest(self, productId, clientId, actionRequest):
	'''
	The method is used to set a product action request for a client.
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(clientId)
	
	# Implementation
	productId = productId.lower()
	netBootProductIds = self.getProductIds_list(productType = 'netboot')
	isNetBoot = (productId in netBootProductIds)
	if isNetBoot and actionRequest in ('setup', 'once', 'always', 'uninstall'):
		for ar in self.getProductActionRequests_listOfHashes(clientId):
			if ar['actionRequest'] in ('setup', 'once', 'always', 'uninstall') and ar['productId'] in netBootProductIds and (ar['productId'] != productId):
				raise BackendIOError('There is already an other netboot product action request set (%s)' % ar['productId'])
		
	result = self._execMethod(self.defaultBackend, 'setProductActionRequest', productId, clientId, actionRequest)
	
	if isNetBoot:
		if actionRequest in ['none', 'by_policy', 'start_install']:
			self.unsetPXEBootConfiguration(clientId)
		elif actionRequest in ['setup', 'update', 'uninstall', 'once', 'always']:
			self.setPXEBootConfiguration(clientId)
	
	return result

def unsetProductActionRequest(self, productId, clientId):
	'''
	The method unsets an action request set for a product on a client.
	Setting the action request "none" is not the same!
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		self._verifyUser(clientId)
	
	# Implementation
	productId = productId.lower()
	if productId in self.getProductIds_list(productType = 'netboot'):
		self.unsetPXEBootConfiguration(clientId)
	return self._execMethod(self.defaultBackend, 'unsetProductActionRequest', productId, clientId)

def getLocalBootProductStates_hash(self, objectIds=[], options={}):
	'''
	The method returns all localboot product states (installationStatus + actionRequest)
	for every given object
	'''
	
	if ( type(objectIds) != type([]) and type(objectIds) != type(()) ):
		objectIds = [ objectIds ]
	
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		if (len(objectIds) == 1):
			self._verifyUser(objectIds[0])
		else:
			raise
	
	# Implementation
	productStates = self._execMethod(self.defaultBackend, 'getLocalBootProductStates_hash', objectIds)
	return self.adjustProductStates( productStates, objectIds, options )

def getNetBootProductStates_hash(self, objectIds=[], options={}):
	'''
	The method returns all netboot product states (installationStatus + actionRequest)
	for every given client
	'''
	
	if ( type(objectIds) != type([]) and type(objectIds) != type(()) ):
		objectIds = [ objectIds ]
	
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		if (len(objectIds) == 1):
			self._verifyUser(objectIds[0])
		else:
			raise
	
	# Implementation
	productStates = self._execMethod(self.defaultBackend, 'getNetBootProductStates_hash', objectIds)
	return self.adjustProductStates( productStates, objectIds, options )

def getProductStates_hash(self, objectIds=[], options={}):
	'''
	The method returns all product states (installationStatus + actionRequest)
	for every given client
	'''
	
	if ( type(objectIds) != type([]) and type(objectIds) != type(()) ):
		objectIds = [ objectIds ]
	
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except:
		if (len(objectIds) == 1):
			self._verifyUser(objectIds[0])
		else:
			raise
	
	# Implementation
	productStates = self._execMethod(self.defaultBackend, 'getProductStates_hash', objectIds)
	return self.adjustProductStates( productStates, objectIds, options )

def getProductPropertyDefinitions_hash(self, depotId=None):
	'''
	The method is used to get all defined product properties for every product.
	'''
	# Security
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getProductPropertyDefinitions_hash', depotId)

def getProductPropertyDefinitions_listOfHashes(self, productId, depotId=None):
	'''
	The method is used to get all defined product properties for one product.
	'''
	# Security
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getProductPropertyDefinitions_listOfHashes', productId, depotId)

def deleteProductPropertyDefinition(self, productId, name, depotIds=[]):
	'''
	The method is used to delete a product property definition from a product.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'deleteProductPropertyDefinition', productId, name, depotIds)

def deleteProductPropertyDefinitions(self, productId, depotIds=[]):
	'''
	The method is used to delete all product property definitions of a product.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'deleteProductPropertyDefinitions', productId, depotIds)

def createProductPropertyDefinition(self, productId, name, description=None, defaultValue=None, possibleValues=[], depotIds=[]):
	'''
	The method is used to define a product property.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'createProductPropertyDefinition', productId, name, description, defaultValue, possibleValues, depotIds)

def getProductProperties_hash(self, productId, objectId=None):
	'''
	Returns a hash containing object specific settings for a product
	'''
	# Security
	if objectId not in self.getDepotIds_list():
		try:
			self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
		except:
			self._verifyUser(objectId)
		
	# Implementation
	return self._execMethod(self.defaultBackend, 'getProductProperties_hash', productId, objectId)
	
def setProductProperties(self, productId, properties, objectId=None):
	'''
	The method is used to set product properties for an object.
	The properties have do be passed as a hash!
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except Exception, e:
		if not objectId:
			raise e
		self._verifyUser(objectId)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'setProductProperties', productId, properties, objectId)

def setProductProperty(self, productId, property, value, objectId=None):
	# Implementation
	properties = self.getProductProperties_hash(productId, objectId)
	properties[property] = value
	self.setProductProperties(productId, properties, objectId)
	
def deleteProductProperty(self, productId, property, objectId=None):
	'''
	The method is used to delete a product property for an object.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'deleteProductProperty', depotId, productId, property, objectId)

def deleteProductProperties(self, productId, objectId=None):
	'''
	The method is used to delete all product properties for an object.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'deleteProductProperties', productId, objectId)

def getProductDependencies_listOfHashes(self, productId=None, depotId=None):
	'''
	Returns a list of product dependencies for an specific product.
	The hashes contain the following keys:
	   "productId": the product the dependency is assigned to,
	   "action": the action the dependency is assigned to,
	   "requiredProductId": the required product or 
	   "requiredProductClassId": the required product class
	   "requiredAction": the action which has to be executed for the dependend product(class) or,
	   "requiredInstallationStatus": the required installation status of the product(class),
	   "requirementType": the type of requirement ('before', 'after', ...)
	'''
	# Security
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'getProductDependencies_listOfHashes', productId, depotId)

def createProductDependency(self, productId, action, requiredProductId="", requiredProductClassId="", requiredAction="", requiredInstallationStatus="", requirementType="", depotIds=[]):
	'''
	Creates a product dependency for a specific product and an action.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'createProductDependency', productId, action, requiredProductId, requiredProductClassId, requiredAction, requiredInstallationStatus, requirementType, depotIds)

def deleteProductDependency(self, productId, action="", requiredProductId="", requiredProductClassId="", requirementType="", depotIds=[]):
	'''
	Deletes a product dependency for a specific product.
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.defaultBackend, 'deleteProductDependency', productId, action, requiredProductId, requiredProductClassId, requirementType, depotIds)

def createLicenseContract(self, licenseContractId="", partner="", conclusionDate="", notificationDate="", expirationDate="", notes=""):
	'''
	Creates a license contract
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'createLicenseContract', licenseContractId, partner, conclusionDate, notificationDate, expirationDate, notes)

def getLicenseContractIds_list(self):
	'''
	Returns the list of known license contract ids
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'getLicenseContractIds_list')

def getLicenseContract_hash(self, licenseContractId):
	'''
	Returns the license contract information of the given license contract id
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'getLicenseContract_hash', licenseContractId)

def getLicenseContracts_listOfHashes(self):
	'''
	Returns the license contract informations for all license contracts
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'getLicenseContracts_listOfHashes')


def deleteLicenseContract(self, licenseContractId):
	'''
	Deletes the license contract given by license contract id
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'deleteLicenseContract', licenseContractId)

def createSoftwareLicense(self, softwareLicenseId="", licenseContractId="", licenseType="", maxInstallations="", boundToHost="", expirationDate=""):
	'''
	Creates a software license
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'createSoftwareLicense', softwareLicenseId, licenseContractId, licenseType, maxInstallations, boundToHost, expirationDate)

def getSoftwareLicenseIds_list(self):
	'''
	Returns the list of known software license ids
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'getSoftwareLicenseIds_list')
	
def getSoftwareLicense_hash(self, softwareLicenseId):
	'''
	Returns the software license information of the given software license id
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'getSoftwareLicense_hash', softwareLicenseId)

def getSoftwareLicenses_listOfHashes(self):
	'''
	Fetches all software licenses
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'getSoftwareLicenses_listOfHashes')

def deleteSoftwareLicense(self, softwareLicenseId):
	'''
	Deletes the software license given by software license id
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'deleteSoftwareLicense', softwareLicenseId)

def createLicensePool(self, licensePoolId="", description="", productIds=[], windowsSoftwareIds=[]):
	'''
	Creates a license pool
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'createLicensePool', licensePoolId, description, productIds, windowsSoftwareIds)

def getLicensePoolIds_list(self):
	'''
	Returns the list of known license pool ids
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'getLicensePoolIds_list')

def getLicensePool_hash(self, licensePoolId):
	'''
	Returns the license pool information of the given license pool id
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'getLicensePool_hash', licensePoolId)
	

def getLicensePools_listOfHashes(self):
	'''
	Returns all license pools
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'getLicensePools_listOfHashes')

def deleteLicensePool(self, licensePoolId):
	'''
	Deletes the license pool given by license pool id
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'deleteLicensePool', licensePoolId)

def addSoftwareLicenseToLicensePool(self, softwareLicenseId, licensePoolId, licenseKey=""):
	'''
	Adds a software license to a license pool
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'addSoftwareLicenseToLicensePool', softwareLicenseId, licensePoolId, licenseKey)

def removeSoftwareLicenseFromLicensePool(self, softwareLicenseId, licensePoolId):
	'''
	Removes a software license from a license pool
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'removeSoftwareLicenseFromLicensePool', softwareLicenseId, licensePoolId)

def addProductIdsToLicensePool(self, productIds, licensePoolId):
	'''
	Adds product ids to a license pool
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'addProductIdsToLicensePool', productIds, licensePoolId)
	
def removeProductIdsFromLicensePool(self, productIds, licensePoolId):
	'''
	Removes product ids from a licensePoolId
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'removeProductIdsFromLicensePool', productIds, licensePoolId)

def setWindowsSoftwareIdsToLicensePool(self, windowsSoftwareIds, licensePoolId):
	'''
	Set the windows software ids of a license pool
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'setWindowsSoftwareIdsToLicensePool', windowsSoftwareIds, licensePoolId)

#def getSoftwareLicenses_listOfHashes(self, licensePoolId=""):
#	'''
#	Fetches all licenses
#	'''
#	# Security
#	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
#	
#	# Implementation
#	return self._execMethod(self.licenseBackend, 'getSoftwareLicenses_listOfHashes', licensePoolId)

def getOrCreateSoftwareLicenseUsage_hash(self, hostId, licensePoolId="", productId="", windowsSoftwareId=""):
	'''
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except Exception, e:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'getOrCreateSoftwareLicenseUsage_hash', hostId, licensePoolId, productId, windowsSoftwareId)

def getAndAssignSoftwareLicenseKey(self, hostId, licensePoolId="", productId="", windowsSoftwareId=""):
	'''
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except Exception, e:
		self._verifyUser(hostId)
	
	# Implementation
	licenseKey = ''
	exception = None
	try:
		modules = self.getOpsiInformation_hash()['modules']
		if modules.get('valid') and modules.get('license_management'):
			licenseKey = self._execMethod(self.licenseBackend, 'getAndAssignSoftwareLicenseKey', hostId, licensePoolId, productId, windowsSoftwareId)
		else:
			logger.info("License management currently disabled")
	except Exception, e:
		exception = e
		logger.warning("Failed to get license key from license management for host: %s, pool: %s, product: %s, softwareid : %s" \
				% (hostId, licensePoolId, productId, windowsSoftwareId) )
	
	if not licenseKey:
		# Trying the old way - product keys as product property
		if productId:
			for (k, v) in self.getProductProperties_hash(productId = productId, objectId = hostId).items():
				if (k.lower() == 'productkey'):
					licenseKey = v
					break
	if not licenseKey and exception:
		raise exception
	
	return licenseKey
	
def getLicenseKey(self, productId, clientId):
	'''
	Returns an unused licensekey if available or
	the license key assigend to a specific client
	! do not use ! deprecated !
	'''
	# Implementation
	return self.getAndAssignSoftwareLicenseKey(hostId = clientId, productId = productId)

def getSoftwareLicenseUsages_listOfHashes(self, hostIds=[], licensePoolIds=[]):
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'getSoftwareLicenseUsages_listOfHashes', hostIds, licensePoolIds)

def setSoftwareLicenseUsage(self, hostId, licensePoolId, softwareLicenseId, licenseKey="", notes=""):
	'''
	Edits the registered license key and the notes for a given assignment of hostId, softwareLicenseId and licensePoolId
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except Exception, e:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'setSoftwareLicenseUsage', hostId, licensePoolId, softwareLicenseId, licenseKey, notes)

def deleteSoftwareLicenseUsage(self, hostId, softwareLicenseId="", licensePoolId="", productId="", windowsSoftwareId=""):
	'''
	Removes the registration of a softwareLicense for a host
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except Exception, e:
		self._verifyUser(hostId)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'deleteSoftwareLicenseUsage', hostId, softwareLicenseId, licensePoolId, productId, windowsSoftwareId)

def deleteAllSoftwareLicenseUsages(self, hostIds=[]):
	'''
	Frees all assigned licenses
	'''
	# Security
	try:
		self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	except Exception, e:
		if not type(hostIds) is list or (len(hostIds) != 1):
			raise
		self._verifyUser(hostIds[0])
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'deleteAllSoftwareLicenseUsages', hostIds)
	
def getLicenseStatistics_hash(self, licensePoolId):
	'''
	Returns informations about free, used and avaliable licenses
	'''
	# Security
	self._verifyGroupMembership(SYSTEM_ADMIN_GROUP)
	
	# Implementation
	return self._execMethod(self.licenseBackend, 'getLicenseStatistics_hash', licensePoolId)


