# -*- coding: utf-8 -*-

def configState_getObjectIdForDefaults():
	return self.host_getIdents(type = 'OpsiConfigserver')[0]
	
def configState_getValues(self, configId=[], objectId=[], allowOverwriteDefaultWithEmptyValues=True):
	configId = forceUnicodeLowerList(configId)
	objectId = forceObjectIdList(objectId)
	
	defaultValues = {}
	for config in self.config_getObjects(id = configId):
		defaultValues[config.id] = config.defaultValues
		logger.debug("Default values for '%s': %s" % (config.id, config.defaultValues))
	
	objectValues = {}
	if objectId:
		for objectId in objectId:
			objectValues[objectId] = copy.deepcopy(defaultValues)
	else:
		for objectId in self.host_getIdents():
			objectValues[objectId] = copy.deepcopy(defaultValues)
	
	for configState in self.configState_getObjects(configId = configId, objectId = objectId):
		if not objectValues.has_key(configState.objectId):
			logger.warning(u"Object id '%s' not found in objects")
			continue
		if not objectValues[configState.objectId].has_key(configState.configId):
			logger.warning(u"Non existing config id '%s' found in config state of object id '%s'" \
				% (configState.configId, configState.objectId))
			continue
		if not configState.values and not allowOverwriteDefaultWithEmptyValues:
			continue
		objectValues[configState.objectId][configState.configId] = configState.values
	return objectValues

def configState_getDepotserverIdsToClientIds(self, depotIds=[], clientIds=[]):
	result = {}
	if not depotIds:
		depotIds = self.host_getIdents(type = 'OpsiDepotserver')
	for depotId in depotIds:
		result[depotId] = []
	
	knownClientIds = self.host_getIdents(type = 'OpsiClient', id = clientIds)
	configId = 'network.depot_server.depot_id'
	values = self.configState_getValues(configId = configId, objectId = clientIds, allowOverwriteDefaultWithEmptyValues = False)
	for (objectId, configState) in values.items():
		if not objectId in knownClientIds:
			logger.debug(u"Skipping objectId '%s': not a opsi client" % objectId)
			continue
		depotId = configState.get(configId, [])[0]
		if not depotId:
			logger.error(u"No depot server configured for client '%s'" % objectId)
			continue
		result[depotId].append(objectId)
	return result
	
def configState_getDepotserverId(self, clientId):
	return self.configState_getDepotserverIdsToClientIds(clientIds = forceHostId(clientId)).keys()[0]
	
	#objectId = None
	#if clientId:
	#	objectId = forceHostId(clientId)
	#else:
	#	objectId = self.configState_getObjectIdForDefaults()
	#configId = 'network.depot_server.depot_id'
	#values = self.configState_getValues(configId = configId, objectId = objectId, allowOverwriteDefaultWithEmptyValues = False)
	#if not values or not values.get(objectId, {}).get(configId, []):
	#	logger.error(u"No default depotserver configured")
	#	configServers = self.host_getObjects(type = 'OpsiConfigserver')
	#	if not configServers:
	#		raise BackendConfigurationError(u"No config server found")
	#	return configServers[0].id
	#return forceHostId(values[objectId][configId][0])
	
#def configState_getValues(self, names=[], objectIds=[]):
#	if names:
#		names = forceUnicodeLowerList(names)
#	if objectIds:
#		objectIds = forceHostIdList(objectIds)
#	
#	defaultValues = {}
#	if names:
#		for name in names:
#			configs = self.config_get(attributes = ['defaultValues'], name = name)
#			if not configs:
#				raise BackendMissingDataError("No such config: '%s'" % name)
#			defaultValues[name] = configs[0].defaultValues
#	else:
#		for config in self.config_get(attributes = ['name', 'defaultValues']):
#			defaultValues[config.name] = config.defaultValues
#	
#	objectValues = {}
#	if objectIds:
#		for objectId in objectIds:
#			objectValues[objectId] = copy.deepcopy(defaultValues)
#			if names:
#				for name in names:
#					configStates = self.configState_get(attributes = ['name', 'values'], name = name, objectId = objectId)
#					if configStates and objectValues[objectId].has_key(configStates[0].name):
#						objectValues[objectId][configStates[0].name] = configStates[0].values
#			else:
#				for configState in self.configState_get(attributes = ['name', 'values'], objectId = objectId):
#					if objectValues[objectId].has_key(configState.name):
#						objectValues[objectId][configState.name] = configState.values
#	else:
#		for hostId in self.host_getIds():
#			objectIds.append(hostId)
#			objectValues[hostId] = copy.deepcopy(defaultValues)
#		for configState in self.configState_get(attributes = ['name', 'objectId', 'values']):
#			if objectValues[configState.objectId].has_key(configState.name):
#				objectValues[configState.objectId][configState.name] = configState.values
#	
#	return objectValues
#
#def configState_setValues(self, values={}):
#	values = forceDict(values)
#	
#	configserverIds = self.host_getIds(type = 'OpsiConfigserver')
#	depotserverIds = self.host_getIds(type = 'OpsiDepotserver')
#	
#	for (objectId, data) in values.items():
#		if objectId in configserverIds or objectId in depotserverIds:
#			data = forceDict(data)
#			if not data.has_key('name'):
#				raise BackendBadValueError(u"Key 'name' missing in hash: %s" % data)
#			configs = config_get(name = data['name'])
#			#if configs
#			self.config_create(
#				UnicodeConfig(
#					name = key,
#					defaultValues = [ value ],
#					editable = True,
#					multiValue = False
#				)
#			)
#		
#		
#	#########################
#	#for (objectId, values) in values.items():
#	#	values = forceDict(values)
#	#	for (name, value) in values.items():
#	#	
#	#	for (key, value) in config.items():
#	#	if not objectId or not config.get(name = name):
#	#		self.config_create(
#	#			UnicodeConfig(
#	#				name = key,
#	#				defaultValues = [ value ],
#	#				editable = True,
#	#				multiValue = False
#	#			)
#	#		)
#	#	if objectId:
#	#		configStates.append(
#	#			ConfigState(
#	#				name = key,
#	#				objectId = objectId,
#	#				values = [ key ]
#	#			)
#	#		)
#	#
#	#if names:
#	#	names = forceUnicodeLowerList(names)
#	#if objectIds:
#	#	objectIds = forceHostIdList(objectIds)
#	#
#	#defaultValues = {}
#	#if names:
#	#	for name in names:
#	#		configs = self.config_get(attributes = ['defaultValues'], name = name)
#	#		if not configs:
#	#			raise BackendMissingDataError("No such config: '%s'" % name)
#	#		defaultValues[name] = configs[0].defaultValues
#	#else:
#	#	for config in self.config_get(attributes = ['name', 'defaultValues']):
#	#		defaultValues[config.name] = config.defaultValues
#	#
#	#objectValues = {}
#	#if objectIds:
#	#	for objectId in objectIds:
#	#		objectValues[objectId] = copy.deepcopy(defaultValues)
#	#		if names:
#	#			for name in names:
#	#				configStates = self.configState_get(attributes = ['name', 'values'], name = name, objectId = objectId)
#	#				if configStates and objectValues[objectId].has_key(configStates[0].name):
#	#					objectValues[objectId][configStates[0].name] = configStates[0].values
#	#		else:
#	#			for configState in self.configState_get(attributes = ['name', 'values'], objectId = objectId):
#	#				if objectValues[objectId].has_key(configState.name):
#	#					objectValues[objectId][configState.name] = configState.values
#	#else:
#	#	for hostId in self.host_getIds():
#	#		objectIds.append(hostId)
#	#		objectValues[hostId] = copy.deepcopy(defaultValues)
#	#	for configState in self.configState_get(attributes = ['name', 'objectId', 'values']):
#	#		if objectValues[configState.objectId].has_key(configState.name):
#	#			objectValues[configState.objectId][configState.name] = configState.values
#	#
#	#return objectValues
#
#def group_getIds(self, type=None):
#	result = []
#	for group in self.group_get(attributes = ['id'], type = type):
#		result.append(group.id)
#	return result
#
#
#
#
#
#
#
#
#
#
#
#
