# -*- coding: utf-8 -*-

def configState_getObjectIdForDefaults():
	return self.host_getIdents(type = 'OpsiConfigserver')[0]
	


	
def configState_getDepotserverId(self, clientId):
	for (depotId, clientIds) in self.configState_getDepotserverIdsToClientIds(clientIds = forceHostId(clientId)).items():
		if clientId in clientIds:
			return depotId
	raise BackendConfigurationError(u"No depot server found for client '%s'" % clientId)
	
#def configState_getValues(self, names=[], objectIds=[]):
#	if names:
#		names = forceUnicodeLowerList(names)
#	if objectIds:
#		objectIds = forceHostIdList(objectIds)
#	
#	defaultValues = {}
#	if names:
#		for name in names:
#			configs = self.config_get(attributes = ['defaultValues'], name = name)
#			if not configs:
#				raise BackendMissingDataError("No such config: '%s'" % name)
#			defaultValues[name] = configs[0].defaultValues
#	else:
#		for config in self.config_get(attributes = ['name', 'defaultValues']):
#			defaultValues[config.name] = config.defaultValues
#	
#	objectValues = {}
#	if objectIds:
#		for objectId in objectIds:
#			objectValues[objectId] = copy.deepcopy(defaultValues)
#			if names:
#				for name in names:
#					configStates = self.configState_get(attributes = ['name', 'values'], name = name, objectId = objectId)
#					if configStates and objectValues[objectId].has_key(configStates[0].name):
#						objectValues[objectId][configStates[0].name] = configStates[0].values
#			else:
#				for configState in self.configState_get(attributes = ['name', 'values'], objectId = objectId):
#					if objectValues[objectId].has_key(configState.name):
#						objectValues[objectId][configState.name] = configState.values
#	else:
#		for hostId in self.host_getIds():
#			objectIds.append(hostId)
#			objectValues[hostId] = copy.deepcopy(defaultValues)
#		for configState in self.configState_get(attributes = ['name', 'objectId', 'values']):
#			if objectValues[configState.objectId].has_key(configState.name):
#				objectValues[configState.objectId][configState.name] = configState.values
#	
#	return objectValues
#
#def configState_setValues(self, values={}):
#	values = forceDict(values)
#	
#	configserverIds = self.host_getIds(type = 'OpsiConfigserver')
#	depotserverIds = self.host_getIds(type = 'OpsiDepotserver')
#	
#	for (objectId, data) in values.items():
#		if objectId in configserverIds or objectId in depotserverIds:
#			data = forceDict(data)
#			if not data.has_key('name'):
#				raise BackendBadValueError(u"Key 'name' missing in hash: %s" % data)
#			configs = config_get(name = data['name'])
#			#if configs
#			self.config_create(
#				UnicodeConfig(
#					name = key,
#					defaultValues = [ value ],
#					editable = True,
#					multiValue = False
#				)
#			)
#		
#		
#	#########################
#	#for (objectId, values) in values.items():
#	#	values = forceDict(values)
#	#	for (name, value) in values.items():
#	#	
#	#	for (key, value) in config.items():
#	#	if not objectId or not config.get(name = name):
#	#		self.config_create(
#	#			UnicodeConfig(
#	#				name = key,
#	#				defaultValues = [ value ],
#	#				editable = True,
#	#				multiValue = False
#	#			)
#	#		)
#	#	if objectId:
#	#		configStates.append(
#	#			ConfigState(
#	#				name = key,
#	#				objectId = objectId,
#	#				values = [ key ]
#	#			)
#	#		)
#	#
#	#if names:
#	#	names = forceUnicodeLowerList(names)
#	#if objectIds:
#	#	objectIds = forceHostIdList(objectIds)
#	#
#	#defaultValues = {}
#	#if names:
#	#	for name in names:
#	#		configs = self.config_get(attributes = ['defaultValues'], name = name)
#	#		if not configs:
#	#			raise BackendMissingDataError("No such config: '%s'" % name)
#	#		defaultValues[name] = configs[0].defaultValues
#	#else:
#	#	for config in self.config_get(attributes = ['name', 'defaultValues']):
#	#		defaultValues[config.name] = config.defaultValues
#	#
#	#objectValues = {}
#	#if objectIds:
#	#	for objectId in objectIds:
#	#		objectValues[objectId] = copy.deepcopy(defaultValues)
#	#		if names:
#	#			for name in names:
#	#				configStates = self.configState_get(attributes = ['name', 'values'], name = name, objectId = objectId)
#	#				if configStates and objectValues[objectId].has_key(configStates[0].name):
#	#					objectValues[objectId][configStates[0].name] = configStates[0].values
#	#		else:
#	#			for configState in self.configState_get(attributes = ['name', 'values'], objectId = objectId):
#	#				if objectValues[objectId].has_key(configState.name):
#	#					objectValues[objectId][configState.name] = configState.values
#	#else:
#	#	for hostId in self.host_getIds():
#	#		objectIds.append(hostId)
#	#		objectValues[hostId] = copy.deepcopy(defaultValues)
#	#	for configState in self.configState_get(attributes = ['name', 'objectId', 'values']):
#	#		if objectValues[configState.objectId].has_key(configState.name):
#	#			objectValues[configState.objectId][configState.name] = configState.values
#	#
#	#return objectValues
#
#def group_getIds(self, type=None):
#	result = []
#	for group in self.group_get(attributes = ['id'], type = type):
#		result.append(group.id)
#	return result
#
#
#
#
#
#
#
#
#
#
#
#
