# -*- coding: utf-8 -*-

def _getProductStates_hash(self, objectIds=[], options={}, productType=None):
	if not productType: productType = None
	result = {}
	
	productHasPriority = {}
	for product in self.product_getObjects():
		productHasPriority[product.id]= product.priority
	

	productOnClients = self.productOnClient_getObjects(clientId = objectIds, productType = productType)
	
	
	for productOnClient in productOnClients:
		if not result.has_key(productOnClient.clientId):
			result[productOnClient.clientId] = []
		lastStateChange = productOnClient.modificationTime or u''
		match = re.search('^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)$', lastStateChange)
		if match:
			lastStateChange = u'%s%s%s%s%s%s' % ( match.group(1), match.group(2), match.group(3), match.group(4), match.group(5), match.group(6) )
			
		actionSequence = productHasPriority[productOnClient.productId];
		if not actionSequence:
			actionSequence = 0
			
		result[productOnClient.clientId].append({
			u"lastStateChange":       lastStateChange,
			u"productVersion":        productOnClient.productVersion or u'',
			u"packageVersion":        productOnClient.packageVersion or u'',
			u"targetConfiguration":   productOnClient.targetConfiguration or u'',
			u"lastAction":            productOnClient.lastAction or u'',
			u"installationStatus":    productOnClient.installationStatus,
			u"actionRequest":         productOnClient.actionRequest,
			u"actionProgress": productOnClient.actionProgress or u'',
			u"actionResult": productOnClient.actionResult or u'',
			u"productId":             productOnClient.productId,
			u"productPriority":	productHasPriority[productOnClient.productId],
			u"actionSequence": 	actionSequence
			#u"actionSequence": 	productOnClient.actionSequence
		})
	return result

def getLocalBootProductStates_hash(self, objectIds=[], options={}):
	return self._getProductStates_hash(objectIds = objectIds, options = options, productType = 'LocalbootProduct')

def getNetBootProductStates_hash(self, objectIds=[], options={}):
	return self._getProductStates_hash(objectIds = objectIds, options = options, productType = 'NetbootProduct')

def getProductStates_hash(self, objectIds=[], options={}):
	return self._getProductStates_hash(objectIds = objectIds, options = options)

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	





