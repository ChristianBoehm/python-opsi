# -*- coding: utf-8 -*-

def _getProductStates_hash(self, objectIds=[], options={}, productType=None):
	#based on productOnClients 
	if not productType: productType = None
	result = {}
	
	productHasPriority = {}
	priorityClasses = {}
	
	for product in self.product_getObjects():
		prio = product.priority
		if not prio:
			prio = 0
		productHasPriority[product.id]= prio
		
		if not priorityClasses.has_key(prio):
			priorityClasses[prio] = []
		priorityClasses[prio] .append(product.id)
	
	#self.backend_setOptions({"addProductOnClientDefaults": True})
	productOnClients = self.productOnClient_getObjects(clientId = objectIds, productType = productType)
	
	
	for productOnClient in productOnClients:
		if not result.has_key(productOnClient.clientId):
			result[productOnClient.clientId] = []
		lastStateChange = productOnClient.modificationTime or u''
		match = re.search('^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)$', lastStateChange)
		if match:
			lastStateChange = u'%s%s%s%s%s%s' % ( match.group(1), match.group(2), match.group(3), match.group(4), match.group(5), match.group(6) )
			
		actionSequence = productHasPriority[productOnClient.productId];
		if not actionSequence:
			actionSequence = 0
			
		result[productOnClient.clientId].append({
			u"lastStateChange":       lastStateChange,
			u"productVersion":        productOnClient.productVersion or u'',
			u"packageVersion":        productOnClient.packageVersion or u'',
			u"targetConfiguration":   productOnClient.targetConfiguration or u'',
			u"lastAction":            productOnClient.lastAction or u'',
			u"installationStatus":    productOnClient.installationStatus,
			u"actionRequest":         productOnClient.actionRequest,
			u"actionProgress": productOnClient.actionProgress or u'',
			u"actionResult": productOnClient.actionResult or u'',
			u"productId":             productOnClient.productId,
			u"productPriority":	productHasPriority[productOnClient.productId],
			u"actionSequence": 	actionSequence
			#u"actionSequence": 	productOnClient.actionSequence
		})
	return result

def getLocalBootProductStates_hash(self, objectIds=[], options={}):
	return self._getProductStates_hash(objectIds = objectIds, options = options, productType = 'LocalbootProduct')

def getNetBootProductStates_hash(self, objectIds=[], options={}):
	return self._getProductStates_hash(objectIds = objectIds, options = options, productType = 'NetbootProduct')

def getProductStates_hash(self, objectIds=[], options={}):
	return self._getProductStates_hash(objectIds = objectIds, options = options)

def getProductInfos_hash(self, depotId=None):
	result = {}
	if not depotId or not depotId in self.getDepotIds_list():
		depotId = None
	for product in self.getProducts_listOfHashes(depotId = depotId):
		productInfo = {}
		actions = [ u'none' ]
		if product['setupScript']:     actions.append(u'setup')
		if product['uninstallScript']: actions.append(u'uninstall')
		if product['updateScript']:    actions.append(u'update')
		if product['alwaysScript']:    actions.append(u'always')
		if product['onceScript']:      actions.append(u'once')
		if product['customScript']:    actions.append(u'custom')
		productInfo['actions']=actions
		productInfo['name']=product['name']
		productInfo['description']=product['description']
		productInfo['advice']=product['advice']
		productInfo['priority']=product['priority']
		productInfo['productVersion']=product['productVersion']
		productInfo['packageVersion']=product['packageVersion']
		result[product['productId']] = productInfo
		
	return result

	
	
	
	
	
	
	
	
	
	
	
	





